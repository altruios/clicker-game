{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\clicker game\\\\clicker-game\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\";\nimport Building from \"./Building\";\nimport Resource from \"./Resource\";\nimport Clicker from \"./Clicker\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      buildings: gameData.buildingData,\n      resources: gameData.resourceData,\n      clickers: gameData.clickerData\n    };\n    this.HandleClick = this.HandleClick.bind(this);\n    this.HandleChange = this.HandleChange.bind(this);\n    this.buy = this.buy.bind(this);\n    this.gainResource = this.gainResource.bind(this);\n  }\n\n  gameTime() {\n    const gameTick = setInterval(function () {\n      const buildings = this.state.buildings.slice();\n      const oldResources = this.state.resources.slice();\n      const newResources = oldResources.map(resource => {\n        const buildingTarget = buildings.find(x => x.name === resource.name);\n        console.log(resource);\n        resource.amount = resource.amount + buildingTarget.count * buildingTarget.increaseRatio;\n      });\n      this.setState(prevState => {\n        return {\n          resources: newResources\n        };\n      });\n    }, 100);\n  }\n\n  componentDidMount(prevProps, prevState) {\n    this.gameTime();\n  }\n\n  HandleChange(event) {}\n\n  HandleClick(event) {\n    const name = event.target.name;\n    const target = this.state.buildings.find(building => building.name === name);\n    const countCurrent = target.count + 1;\n    console.log(\"Test test test\");\n\n    if (target.isBuyable === true) {\n      this.buy(target);\n      let lastBuildings = this.state.buildings.slice();\n      let newBuildings = lastBuildings.map(building => {\n        if (building.name === name) building.count = countCurrent;\n        return building;\n      });\n      this.setState({\n        buildings: newBuildings\n      });\n    } else {\n      console.log(\"notBuyable\");\n    }\n  }\n\n  buy(target) {\n    console.log(\"test test buy\");\n    const cost = Array.from(target.buyPrice);\n    let lastResources = this.state.resources.slice();\n    let newResources = lastResources.map(resource => resource -= cost.filter(price => price === resource));\n    this.setState({\n      resources: newResources\n    });\n  }\n\n  gainResource(event) {\n    const name = event.target.name;\n    const lastResources = this.state.resources.slice();\n    const newResources = lastResources.map(resource => {\n      if (resource.name === name) {\n        resource.amount = Number(resource.amount) + Number(this.state.clickers.find(x => x.name === name).value);\n      }\n\n      return resource;\n    });\n    this.setState({\n      resources: newResources\n    });\n    this.state.buildings.forEach(building => {\n      let buyLength = building.buyPrice.length;\n      console.log(\"until new resource for,\", building.name, \"is\", buyLength);\n      building.buyPrice.forEach(cost => {\n        console.log(\"cost is:\", cost);\n        let thisResource = this.state.resources.find(resource => resource.name === cost.name);\n\n        if (thisResource.amount >= cost.cost) {\n          console.log(\"we have enough in this resouce,\", thisResource.name, \"using the resource:\", cost.name, \"we have:\", cost.cost);\n          buyLength = buyLength - 1;\n        }\n      });\n\n      if (buyLength == 0) {\n        const oldBuildings = this.state.buildings.slice();\n        const newBuildings = oldBuildings.map(buildingord => {\n          if (buildingord.name === building.name) {\n            buildingord.isBuyable = true;\n\n            if (!buildingord.isUnlocked) {\n              buildingord.isUnlocked = true;\n            }\n          }\n\n          return buildingord;\n        });\n        console.log(newBuildings);\n        this.setState({\n          buildings: newBuildings\n        });\n      }\n    });\n  }\n\n  render() {\n    const buildings = this.state.buildings.map(buildingData => {\n      return /*#__PURE__*/React.createElement(Building, {\n        name: buildingData.name,\n        buyPrice: buildingData.buyPrice,\n        count: buildingData.count,\n        subjectsOfIncrease: buildingData.subjectsOfIncrease,\n        isBuyable: buildingData.isBuyable,\n        sellPrice: buildingData.sellPrice,\n        isUnlocked: buildingData.isUnlocked,\n        HandleClick: this.HandleClick,\n        key: buildingData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }\n      });\n    });\n    const resources = this.state.resources.map(resourceData => {\n      return /*#__PURE__*/React.createElement(Resource, {\n        name: resourceData.name,\n        resouceMax: resourceData.resourceMax,\n        isUnlocked: resourceData.isUnlocked,\n        changePerTick: resourceData.changePerTick,\n        counterTillStopped: resourceData.countTillStopped,\n        amount: resourceData.amount,\n        key: resourceData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      });\n    });\n    const clickers = this.state.clickers.map(clickerData => {\n      return /*#__PURE__*/React.createElement(Clicker, {\n        name: clickerData.name,\n        gainResource: this.gainResource,\n        value: clickerData.amount,\n        key: clickerData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }\n    }, buildings, resources, clickers);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/xampp/htdocs/clicker game/clicker-game/src/App.js"],"names":["React","gameData","Building","Resource","Clicker","App","Component","constructor","state","buildings","buildingData","resources","resourceData","clickers","clickerData","HandleClick","bind","HandleChange","buy","gainResource","gameTime","gameTick","setInterval","slice","oldResources","newResources","map","resource","buildingTarget","find","x","name","console","log","amount","count","increaseRatio","setState","prevState","componentDidMount","prevProps","event","target","building","countCurrent","isBuyable","lastBuildings","newBuildings","cost","Array","from","buyPrice","lastResources","filter","price","Number","value","forEach","buyLength","length","thisResource","oldBuildings","buildingord","isUnlocked","render","subjectsOfIncrease","sellPrice","resourceMax","changePerTick","countTillStopped"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\"\nimport Building from \"./Building\"\nimport Resource from \"./Resource\"\nimport Clicker from \"./Clicker\"\nclass App extends React.Component \n  {\n  constructor()\n    {\n    super();\n    this.state = {\n      buildings:gameData.buildingData,\n      resources:gameData.resourceData,\n      clickers:gameData.clickerData\n\n    };\n   this.HandleClick = this.HandleClick.bind(this);\n   this.HandleChange = this.HandleChange.bind(this);\n   this.buy = this.buy.bind(this);\n   this.gainResource = this.gainResource.bind(this);\n\n  }\n  gameTime()\n  {\n  const gameTick = setInterval(function()\n      {\n      const buildings = this.state.buildings.slice();\n      const oldResources = this.state.resources.slice();\n      const newResources = oldResources.map(resource=>\n        {\n        const buildingTarget = buildings.find(x=>x.name ===resource.name);  \n        console.log(resource);\n        resource.amount = resource.amount + buildingTarget.count * buildingTarget.increaseRatio;\n        })\n      \n      this.setState(prevState=>\n        {\n       \n\n\n        return {resources:newResources}\n      })\n    },100);\n  }\n\n\n  componentDidMount(prevProps, prevState)\n    {\n    this.gameTime(); \n  }\n    \n  HandleChange(event)\n    {\n\n  }\n  HandleClick(event)\n    {\n    const name = event.target.name;\n    const target = this.state.buildings.find(building=>building.name===name);\n    const countCurrent= target.count + 1;\n    console.log(\"Test test test\");\n\n    if(target.isBuyable === true)\n      {\n      this.buy(target);  \n      let lastBuildings = this.state.buildings.slice();\n      let newBuildings = lastBuildings.map(building=>\n        {\n        if(building.name === name)\n          building.count = countCurrent;\n        return building;\n      }\n\n      )\n\n     this.setState({buildings:newBuildings});\n    }\n\n    else{\n      console.log(\"notBuyable\");\n    }\n  }\n  buy(target) \n    { \n    console.log(\"test test buy\");\n \n    const cost = Array.from(target.buyPrice);\n    let lastResources = this.state.resources.slice();\n    let newResources = lastResources.map(resource=>resource -= cost.filter(price=> price === resource))\n    this.setState({resources:newResources});\n\n  }\n  gainResource(event)\n    {\n    const name = event.target.name;\n    const lastResources =  this.state.resources.slice();\n      const newResources = lastResources.map(resource=>\n        {\n        if(resource.name === name)  \n          {\n          resource.amount = Number(resource.amount) + Number(this.state.clickers.find(x=>x.name===name).value)\n        }  \n        return resource;\n      });\n\n    this.setState({resources: newResources});\n    this.state.buildings.forEach(building=>\n      {\n      let buyLength = building.buyPrice.length;\n      console.log(\"until new resource for,\", building.name,\"is\", buyLength);  \n      building.buyPrice.forEach(cost=>\n        {\n        console.log(\"cost is:\", cost)\n        let thisResource = this.state.resources.find(resource=>resource.name === cost.name);\n        if(thisResource.amount >= cost.cost)\n          {\n          console.log(\"we have enough in this resouce,\", thisResource.name,\"using the resource:\", cost.name, \"we have:\", cost.cost); \n          buyLength = buyLength-1;\n        }\n      });\n      if(buyLength==0)\n        {\n        const oldBuildings = this.state.buildings.slice();\n        const newBuildings = oldBuildings.map(buildingord=>\n          {\n          if(buildingord.name === building.name)\n            {\n            buildingord.isBuyable = true;\n            if(!buildingord.isUnlocked){buildingord.isUnlocked=true}\n          }\n          return buildingord;\n        });\n        console.log(newBuildings);   \n        this.setState({buildings:newBuildings})\n      }\n     });\n  }\n  render()\n    {\n    const buildings = this.state.buildings.map(buildingData=>\n      {\n      return(\n        <Building \n          name ={buildingData.name}\n          buyPrice={buildingData.buyPrice}\n          count = {buildingData.count}\n          subjectsOfIncrease = {buildingData.subjectsOfIncrease}\n          isBuyable = {buildingData.isBuyable}\n          sellPrice = {buildingData.sellPrice}\n          isUnlocked = {buildingData.isUnlocked}\n          HandleClick = {this.HandleClick}\n          key={buildingData.name}\n          \n        />)\n    });\n    const resources = this.state.resources.map(resourceData=>\n      {\n\n        return(\n\n        <Resource \n         name ={resourceData.name}\n         resouceMax = {resourceData.resourceMax}\n          isUnlocked = {resourceData.isUnlocked}\n          changePerTick = {resourceData.changePerTick}\n          counterTillStopped = {resourceData.countTillStopped}\n          amount={resourceData.amount}\n          key={resourceData.name}\n\n        />)\n\n    })   \n\n    const clickers = this.state.clickers.map(clickerData=>\n      {\n      return(\n        <Clicker\n          name={clickerData.name}  \n          gainResource = {this.gainResource}\n          value = {clickerData.amount}\n          key={clickerData.name}\n\n        />\n\n        )\n    })\n\n\n\n\n  return (\n\n        <div className=\"App\">\n        {buildings}\n        {resources}\n        {clickers}\n        </div>\n       );\n      }\n    \n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}