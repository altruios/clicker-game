{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\clicker game\\\\clicker-game\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\";\nimport Building from \"./Building\";\nimport Resource from \"./Resource\";\nimport Clicker from \"./Clicker\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      buildings: gameData.buildingData,\n      resources: gameData.resourceData,\n      clickers: gameData.clickerData,\n      sciences: gameData.scienceData,\n      upgrades: gameData.upgradeData,\n      traders: gameData.tradeData\n    };\n    this.handleClicker = this.handleClicker.bind(this);\n    this.buy = this.buy.bind(this);\n    this.checkBuyingStatus = this.checkBuyingStatus.bind(this);\n    this.buyState = this.buyStatus.bind(this);\n    this.handleBuildingBuy = this.handleBuildingBuy.bind(this);\n    this.unlock = this.unlock.bind(this);\n  }\n\n  gameTime() {\n    const gameTick = setInterval(() => {\n      this.state.resources.forEach(resource => this.tickResource(resource));\n    }, 1000);\n    const checkTicks = setInterval(() => {\n      this.state.buildings.forEach(building => this.checkBuyingStatus(building));\n    }, 100);\n  }\n\n  tickResource(resource) {\n    const targetResource = resource;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(lastResource => {\n        if (lastResource.name === targetResource.name) {\n          resource.amount = Number(Math.min(resource.max, resource.amount + resource.changePerTick).toFixed(4));\n          resource.counterTillStopped = Math.max(0, resource.counterTillStopped - resource.changePerTick);\n        }\n\n        return lastResource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  componentDidMount(prevProps, prevState) {\n    this.gameTime();\n  }\n\n  handleBuildingBuy(event) {\n    const name = event.target.name;\n    const targetBuilding = this.state.buildings.find(building => building.name === name);\n\n    if (targetBuilding.isBuyable) {\n      const unlocks = targetBuilding.unlocks;\n\n      if (unlocks.length > 0) {\n        unlocks.forEach(whatToUnlock => this.unlock(whatToUnlock));\n      }\n\n      this.buyBuilding(targetBuilding);\n    }\n  }\n\n  buyBuilding(building) {\n    const increaseObjectArray = building.subjectsOfIncrease;\n    const costObjectArray = building.buyPrice;\n    const name = building.name;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(resource => {\n        const targetCost = costObjectArray.find(x => x.name === resource.name);\n        const targetIncrease = increaseObjectArray.find(x => x.name === resource.name);\n\n        if (targetIncrease) {\n          console.log(\"increasing the maximum of resource:\", resource);\n          const buildingCount = building.count + 1;\n          const subject = building.subjectsOfIncrease.find(x => x.name === resource.name);\n          const subMax = subject.max;\n          const subAmount = subject.amount;\n          resource.max = Number((resource.max + subMax).toFixed(4));\n          resource.changePerTick = Number((resource.changePerTick + subAmount).toFixed(5));\n        }\n\n        if (targetCost) {\n          console.log(\"this costs this much:\", resource.name, targetCost.cost);\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4));\n        }\n\n        return resource;\n      });\n      const newBuildings = prevState.buildings.map(build => {\n        if (building.name === build.name) {\n          build.count = build.count + 1;\n          build.buyPrice.forEach(cost => {\n            cost.cost = Number((cost.cost * build.increaseRatio).toFixed(4));\n          });\n        }\n\n        return build;\n      });\n      return {\n        resources: newResources,\n        buildings: newBuildings\n      };\n    });\n  }\n\n  buyScience(science) {\n    const costObjectArray = science.buyPrice;\n    const name = science.name;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(resource => {\n        const targetCost = costObjectArray.find(x => x.name === resource.name);\n\n        if (targetCost) {\n          console.log(\"this costs this much:\", resource.name, targetCost.cost);\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4));\n        }\n\n        return resource;\n      });\n      const newSciences = prevState.buildings.map(scienceBuilding => {\n        if (science.name === scienceBuilding.name) {\n          scienceBuilding.count = scienceBuilding.count + 1;\n          scienceBuilding.buyPrice.forEach(cost => {\n            cost.cost = Number((cost.cost * scienceBuilding.increaseRatio).toFixed(4));\n          });\n        }\n\n        return scienceBuilding;\n      });\n      return {\n        resources: newResources,\n        sciences: newSciences\n      };\n    });\n  }\n\n  unlock(whatToUnlock) {\n    switch (whatToUnlock.type) {\n      case \"resource\":\n        this.setState(prevState => {\n          const newResources = prevState.resources.map(resource => {\n            if (whatToUnlock.name === resource.name) {\n              resource.isUnlocked = true;\n            }\n\n            return resource;\n          });\n          return {\n            resources: newResources\n          };\n        });\n\n      case \"upgrade\":\n        this.setState(prevState => {\n          const newUpgrades = prevState.upgrades.map(upgrade => {\n            if (whatToUnlock.name === upgrade.name) {\n              upgrade.isUnlocked = true;\n            }\n\n            return upgrade;\n          });\n          return {\n            upgrades: newUpgrades\n          };\n        });\n\n      case \"science\":\n        this.setState(prevState => {\n          const newSciences = prevState.sciences.map(science => {\n            if (whatToUnlock.name === science.name) {\n              science.isUnlocked = true;\n            }\n\n            return science;\n          });\n          return {\n            sciences: newSciences\n          };\n        });\n\n      case \"trade\":\n        this.setState(prevState => {\n          const newTrade = prevState.traders.map(trade => {\n            if (whatToUnlock.name === trade.name) {\n              trade.isUnlocked = true;\n            }\n\n            return trade;\n          });\n          return {\n            sciences: newTrade\n          };\n        });\n    }\n  }\n\n  handleClicker(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState(prevState => {\n      const targetClicker = prevState.clickers.find(x => x.name === name);\n      const newResources = prevState.resources.map(resource => {\n        const targetIncrease = targetClicker.subjectsOfIncrease.find(x => x.name === resource.name);\n\n        if (targetIncrease) {\n          resource.amount = Number(Math.min(resource.max, resource.amount + targetIncrease.amount).toFixed(4));\n        }\n\n        return resource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  checkBuyingStatus(building) {\n    this.setState(prevState => {\n      const targetResources = prevState.resources.filter(resource => {\n        const targetBuyPriceObject = building.buyPrice.find(x => x.name === resource.name);\n\n        if (targetBuyPriceObject) {\n          return resource;\n        }\n      });\n      const newBuildings = prevState.buildings.map(build => {\n        if (build.name === building.name) {\n          const buyStatus = this.buyStatus(targetResources, building.buyPrice);\n          build.isBuyable = buyStatus;\n\n          if (buyStatus) {\n            build.isUnlocked = true;\n          }\n        }\n\n        return build;\n      });\n      return {\n        buildings: newBuildings\n      };\n    });\n  }\n\n  buyStatus(resourceArray, costArray) {\n    let buyStatus = false;\n    let buyLength = costArray.length;\n    resourceArray.forEach(resource => {\n      const targetCost = costArray.find(x => x.name === resource.name);\n\n      if (targetCost.cost <= resource.amount) {\n        buyLength = buyLength - 1;\n      }\n    });\n\n    if (buyLength === 0) {\n      buyStatus = true;\n    }\n\n    return buyStatus;\n  }\n\n  render() {\n    const buildings = this.state.buildings.map(buildingData => {\n      return /*#__PURE__*/React.createElement(Building, {\n        key: buildingData.id,\n        name: buildingData.name,\n        currentPrices: this.state.resources,\n        handleBuildingBuy: this.handleBuildingBuy,\n        buyPrice: buildingData.buyPrice,\n        count: buildingData.count,\n        subjectsOfIncrease: buildingData.subjectsOfIncrease,\n        isBuyable: buildingData.isBuyable,\n        isUnlocked: buildingData.isUnlocked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 9\n        }\n      });\n    });\n    const resources = this.state.resources.map(resourceData => {\n      return /*#__PURE__*/React.createElement(Resource, {\n        name: resourceData.name,\n        max: resourceData.max,\n        isUnlocked: resourceData.isUnlocked,\n        changePerTick: resourceData.changePerTick,\n        amount: resourceData.amount,\n        key: resourceData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 9\n        }\n      });\n    });\n    const clickers = this.state.clickers.map(clickerData => {\n      return /*#__PURE__*/React.createElement(Clicker, {\n        name: clickerData.name,\n        handleClicker: this.handleClicker,\n        value: clickerData.amount,\n        key: clickerData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }\n    }, \"COLOR CLICKER\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buildingContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }\n    }, buildings), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"resourceContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }\n    }, resources), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clickerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }\n    }, clickers));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/xampp/htdocs/clicker game/clicker-game/src/App.js"],"names":["React","gameData","Building","Resource","Clicker","App","Component","constructor","state","buildings","buildingData","resources","resourceData","clickers","clickerData","sciences","scienceData","upgrades","upgradeData","traders","tradeData","handleClicker","bind","buy","checkBuyingStatus","buyState","buyStatus","handleBuildingBuy","unlock","gameTime","gameTick","setInterval","forEach","resource","tickResource","checkTicks","building","targetResource","setState","prevState","newResources","map","lastResource","name","amount","Number","Math","min","max","changePerTick","toFixed","counterTillStopped","componentDidMount","prevProps","event","target","targetBuilding","find","isBuyable","unlocks","length","whatToUnlock","buyBuilding","increaseObjectArray","subjectsOfIncrease","costObjectArray","buyPrice","targetCost","x","targetIncrease","console","log","buildingCount","count","subject","subMax","subAmount","cost","newBuildings","build","increaseRatio","buyScience","science","newSciences","scienceBuilding","type","isUnlocked","newUpgrades","upgrade","newTrade","trade","value","targetClicker","targetResources","filter","targetBuyPriceObject","resourceArray","costArray","buyLength","render","id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport gameData from \"./gameData.js\"\r\nimport Building from \"./Building\"\r\nimport Resource from \"./Resource\"\r\nimport Clicker from \"./Clicker\"\r\nclass App extends React.Component \r\n  {\r\n  constructor()\r\n    {\r\n    super();\r\n    this.state = {\r\n      buildings:gameData.buildingData,\r\n      resources:gameData.resourceData,\r\n      clickers:gameData.clickerData,\r\n      sciences:gameData.scienceData,\r\n      upgrades:gameData.upgradeData,\r\n      traders:gameData.tradeData\r\n\r\n    };\r\n   this.handleClicker = this.handleClicker.bind(this);\r\n   this.buy = this.buy.bind(this);\r\n   this.checkBuyingStatus = this.checkBuyingStatus.bind(this);\r\n   this.buyState = this.buyStatus.bind(this);\r\n   this.handleBuildingBuy = this.handleBuildingBuy.bind(this);\r\n   this.unlock = this.unlock.bind(this);\r\n  }\r\n  gameTime()\r\n    {\r\n    const gameTick = setInterval(()=>\r\n      {\r\n\r\n      this.state.resources.forEach(resource=>this.tickResource(resource));\r\n    },1000);\r\n    const checkTicks = setInterval(()=>\r\n      {\r\n      this.state.buildings.forEach(building=>this.checkBuyingStatus(building));\r\n    },100);\r\n\r\n  }\r\n\r\n  tickResource(resource)\r\n    {\r\n    const targetResource = resource;  \r\n    this.setState((prevState) =>\r\n      {  \r\n      const newResources = prevState.resources.map(lastResource=>\r\n        {\r\n        if(lastResource.name === targetResource.name)\r\n          {\r\n          resource.amount = Number(Math.min(resource.max,resource.amount + resource.changePerTick).toFixed(4));\r\n          resource.counterTillStopped = Math.max(0, resource.counterTillStopped - resource.changePerTick);\r\n        }\r\n        return lastResource;\r\n      }); \r\n\r\n      return {resources: newResources}\r\n    });\r\n  }\r\n\r\n  componentDidMount(prevProps, prevState)\r\n    {\r\n    this.gameTime(); \r\n  }\r\n  handleBuildingBuy(event)  \r\n    {\r\n    const name = event.target.name;\r\n    const targetBuilding = this.state.buildings.find(building=>building.name === name)\r\n    if(targetBuilding.isBuyable) \r\n      {\r\n      const unlocks = targetBuilding.unlocks;\r\n      if(unlocks.length>0)\r\n        {\r\n        unlocks.forEach(whatToUnlock=>this.unlock(whatToUnlock));\r\n      \r\n         }\r\n\r\n\r\n      \r\n      this.buyBuilding(targetBuilding);\r\n    }\r\n  }\r\n  buyBuilding(building) \r\n    { \r\n    const increaseObjectArray = building.subjectsOfIncrease; \r\n    const costObjectArray = building.buyPrice \r\n    const name = building.name;\r\n    this.setState(prevState=>\r\n      {\r\n     \r\n      const newResources= prevState.resources.map(resource=>\r\n        {\r\n        const targetCost = costObjectArray.find(x=>x.name === resource.name);    \r\n        const targetIncrease = increaseObjectArray.find(x=>x.name===resource.name);\r\n        if(targetIncrease)\r\n          {\r\n           console.log(\"increasing the maximum of resource:\",resource) \r\n          const buildingCount = (building.count + 1);\r\n          const subject = building.subjectsOfIncrease.find(x=>x.name===resource.name);\r\n          const subMax = subject.max;\r\n          const subAmount = subject.amount;\r\n          resource.max = Number((resource.max + subMax).toFixed(4));\r\n          resource.changePerTick = Number((resource.changePerTick + subAmount).toFixed(5));\r\n        }\r\n        if(targetCost)\r\n          {\r\n           console.log(\"this costs this much:\", resource.name, targetCost.cost) \r\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4)); \r\n        }\r\n\r\n\r\n        return resource;\r\n      });\r\n      const newBuildings = prevState.buildings.map(build=>\r\n        {\r\n        if(building.name === build.name)\r\n          {\r\n          build.count = build.count + 1;\r\n          build.buyPrice.forEach(cost=>\r\n            {\r\n            cost.cost = Number((cost.cost * build.increaseRatio).toFixed(4));\r\n          })\r\n\r\n        }\r\n         return build;\r\n      });\r\n\r\n      return{\r\n        resources:newResources,\r\n        buildings:newBuildings,\r\n      }\r\n    });\r\n\r\n  } \r\n  buyScience(science)\r\n    {\r\n    const costObjectArray = science.buyPrice \r\n    const name = science.name;\r\n    this.setState(prevState=>\r\n      {\r\n     \r\n      const newResources= prevState.resources.map(resource=>\r\n        {\r\n        const targetCost = costObjectArray.find(x=>x.name === resource.name);    \r\n        if(targetCost)\r\n          {\r\n          console.log(\"this costs this much:\", resource.name, targetCost.cost) \r\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4)); \r\n        }\r\n        return resource;\r\n      });\r\n      const newSciences = prevState.buildings.map(scienceBuilding=>\r\n        {\r\n        if(science.name === scienceBuilding.name)\r\n          {\r\n          scienceBuilding.count = scienceBuilding.count + 1;\r\n          scienceBuilding.buyPrice.forEach(cost=>\r\n            {\r\n            cost.cost = Number((cost.cost * scienceBuilding.increaseRatio).toFixed(4));\r\n          })\r\n\r\n        }\r\n         return scienceBuilding;\r\n      });\r\n\r\n      return{\r\n        resources:newResources,\r\n        sciences:newSciences,\r\n      }\r\n    });\r\n  }\r\n  unlock(whatToUnlock)\r\n    {\r\n    switch(whatToUnlock.type)\r\n      {\r\n      case\"resource\": \r\n        this.setState((prevState)=>\r\n          {\r\n          const newResources = prevState.resources.map(resource=>\r\n            {\r\n            if(whatToUnlock.name === resource.name)\r\n              {\r\n              resource.isUnlocked = true;\r\n            }\r\n            return resource;\r\n          });\r\n          return {resources:newResources}\r\n        });\r\n      case\"upgrade\":\r\n        this.setState((prevState)=>\r\n          {\r\n          const newUpgrades = prevState.upgrades.map((upgrade)=>\r\n            {\r\n            if(whatToUnlock.name === upgrade.name)\r\n              {\r\n              upgrade.isUnlocked = true;\r\n            }\r\n            return upgrade;\r\n          })\r\n          return {upgrades:newUpgrades};\r\n        });\r\n      case\"science\":\r\n        this.setState((prevState)=>\r\n          {\r\n          const newSciences = prevState.sciences.map((science)=>\r\n            {\r\n            if(whatToUnlock.name === science.name)\r\n              {\r\n              science.isUnlocked =true;\r\n            }\r\n            return science;\r\n          });\r\n          return {sciences:newSciences}\r\n        });\r\n      case\"trade\":\r\n        this.setState((prevState)=>\r\n          {\r\n          const newTrade = prevState.traders.map((trade)=>\r\n            {\r\n            if(whatToUnlock.name === trade.name)\r\n              {\r\n              trade.isUnlocked =true;\r\n            }\r\n            return trade;\r\n          });\r\n          return {sciences:newTrade}\r\n        });\r\n    } \r\n  }\r\n  handleClicker(event)\r\n    {\r\n    const {name, value} = event.target;  \r\n    this.setState(prevState=>\r\n      {\r\n      const targetClicker = prevState.clickers.find(x=>x.name ===name);\r\n      const newResources = prevState.resources.map(resource=>\r\n          {\r\n           const targetIncrease =  targetClicker.subjectsOfIncrease.find(x=>x.name===resource.name)\r\n          if(targetIncrease)\r\n            {\r\n            resource.amount = Number(Math.min(resource.max,resource.amount + targetIncrease.amount).toFixed(4));\r\n          }\r\n          return resource;\r\n        });\r\n\r\n\r\n      return {resources:newResources}\r\n    });\r\n\r\n  }\r\n\r\n  checkBuyingStatus(building)\r\n    {\r\n    this.setState((prevState)=>\r\n      {  \r\n      const targetResources = prevState.resources.filter((resource)=>\r\n        {\r\n        const targetBuyPriceObject = building.buyPrice.find(x=>x.name===resource.name);  \r\n        if(targetBuyPriceObject)\r\n          {\r\n          return resource;\r\n        }\r\n      });\r\n      \r\n      const newBuildings = prevState.buildings.map((build)=>\r\n        {\r\n        if(build.name === building.name)\r\n          { \r\n          const buyStatus =  this.buyStatus(targetResources, building.buyPrice)\r\n          build.isBuyable = buyStatus;\r\n\r\n          if(buyStatus){\r\n            build.isUnlocked = true;\r\n          }\r\n        }\r\n\r\n        return build\r\n      });\r\n\r\n    return{buildings:newBuildings};\r\n    });\r\n}\r\n  buyStatus(resourceArray, costArray)\r\n    {\r\n    let buyStatus = false;\r\n    let buyLength = costArray.length;\r\n    resourceArray.forEach(resource=>  \r\n      {\r\n      const targetCost = costArray.find(x=>x.name===resource.name);\r\n      if(targetCost.cost<=resource.amount) \r\n        {\r\n        buyLength = buyLength - 1;\r\n      }\r\n    });\r\n    if(buyLength === 0)\r\n      {\r\n      buyStatus = true;\r\n    }\r\n\r\n    return buyStatus;\r\n  }\r\n\r\n \r\n  \r\n  render()\r\n    {\r\n    const buildings = this.state.buildings.map(buildingData=>\r\n      {\r\n      return(\r\n        <Building \r\n          key={buildingData.id}\r\n          name ={buildingData.name}\r\n          currentPrices = {this.state.resources}\r\n          handleBuildingBuy={this.handleBuildingBuy}\r\n          buyPrice={buildingData.buyPrice}\r\n          count = {buildingData.count}\r\n          subjectsOfIncrease = {buildingData.subjectsOfIncrease}\r\n          isBuyable = {buildingData.isBuyable}\r\n          isUnlocked = {buildingData.isUnlocked}\r\n          \r\n        />)\r\n    });\r\n    const resources = this.state.resources.map(resourceData=>\r\n      {\r\n      return(\r\n        <Resource \r\n          name ={resourceData.name}\r\n          max = {resourceData.max}\r\n          isUnlocked = {resourceData.isUnlocked}\r\n          changePerTick = {resourceData.changePerTick}\r\n          amount={resourceData.amount}\r\n          key={resourceData.name}\r\n\r\n        />)\r\n    });   \r\n    const clickers = this.state.clickers.map(clickerData=>\r\n      {\r\n      return(\r\n        <Clicker\r\n          name={clickerData.name} \r\n          handleClicker = {this.handleClicker}\r\n          value = {clickerData.amount}\r\n          key={clickerData.name}\r\n        />\r\n\r\n      )\r\n    });\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"title\">COLOR CLICKER</div>\r\n        <div className=\"buildingContainer\">{buildings}</div>\r\n        <div className=\"resourceContainer\">{resources}</div>\r\n        <div className=\"clickerContainer\">{clickers}</div>\r\n      </div>\r\n    );\r\n  } \r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}