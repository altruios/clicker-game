{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\clicker game\\\\clicker-game\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\";\nimport Building from \"./Building\";\nimport Resource from \"./Resource\";\nimport Clicker from \"./Clicker\";\nimport Science from \"./Science\";\nimport Upgrade from \"./Upgrade\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      buildings: gameData.buildingData,\n      resources: gameData.resourceData,\n      clickers: gameData.clickerData,\n      sciences: gameData.scienceData,\n      upgrades: gameData.upgradeData,\n      traders: gameData.tradeData\n    };\n    this.handleClicker = this.handleClicker.bind(this);\n    this.buyBuilding = this.buyBuilding.bind(this);\n    this.buyScience = this.buyScience.bind(this);\n    this.checkBuyingStatus = this.checkBuyingStatus.bind(this);\n    this.buyState = this.buyStatus.bind(this);\n    this.handleBuildingBuy = this.handleBuildingBuy.bind(this);\n    this.handleUpgrade = this.handleUpgrade.bind(this);\n    this.unlock = this.unlock.bind(this);\n    this.handleBuyScience = this.handleBuyScience.bind(this);\n  }\n\n  gameTime() {\n    const gameTick = setInterval(() => {\n      this.state.resources.forEach(resource => this.tickResource(resource));\n    }, 1000);\n    const checkTicks = setInterval(() => {\n      this.state.buildings.forEach(building => this.checkBuyingStatus(building));\n      this.state.sciences.forEach(science => {\n        if (science.isUnlocked) {\n          this.checkBuyingStatus(science);\n        }\n      });\n      this.state.upgrades.forEach(upgrade => {\n        if (upgrade.isUnlocked) {\n          this.checkBuyingStatus(upgrade);\n        }\n      });\n    }, 100);\n  }\n\n  tickResource(resource) {\n    const targetResource = resource;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(lastResource => {\n        if (lastResource.name === targetResource.name) {\n          resource.amount = Number(Math.min(resource.max, resource.amount + resource.changePerTick).toFixed(4));\n          resource.counterTillStopped = Math.max(0, resource.counterTillStopped - resource.changePerTick);\n        }\n\n        return lastResource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  componentDidMount(prevProps, prevState) {\n    this.gameTime();\n  }\n\n  handleBuildingBuy(event) {\n    const name = event.target.name;\n    const targetBuilding = this.state.buildings.find(building => building.name === name);\n\n    if (targetBuilding.isBuyable) {\n      const unlocks = targetBuilding.unlocks;\n\n      if (unlocks.length > 0) {\n        unlocks.forEach(whatToUnlock => this.unlock(whatToUnlock));\n      }\n\n      this.buyBuilding(targetBuilding);\n    }\n  }\n\n  buyBuilding(building) {\n    const increaseObjectArray = building.subjectsOfIncrease;\n    const costObjectArray = building.buyPrice;\n    const name = building.name;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(resource => {\n        const targetCost = costObjectArray.find(x => x.name === resource.name);\n        const targetIncrease = increaseObjectArray.find(x => x.name === resource.name);\n\n        if (targetIncrease) {\n          console.log(\"increasing the maximum of resource:\", resource);\n          const buildingCount = building.count + 1;\n          const subject = building.subjectsOfIncrease.find(x => x.name === resource.name);\n          const subMax = subject.max;\n          const subAmount = subject.amount;\n          resource.max = Number((resource.max + subMax).toFixed(4));\n          resource.changePerTick = Number((resource.changePerTick + subAmount).toFixed(5));\n        }\n\n        if (targetCost) {\n          console.log(\"this costs this much:\", resource.name, targetCost.cost);\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4));\n        }\n\n        return resource;\n      });\n      const newBuildings = prevState.buildings.map(build => {\n        if (building.name === build.name) {\n          build.count = build.count + 1;\n          build.buyPrice.forEach(cost => {\n            cost.cost = Number((cost.cost * build.increaseRatio).toFixed(4));\n          });\n        }\n\n        return build;\n      });\n      return {\n        resources: newResources,\n        buildings: newBuildings\n      };\n    });\n  }\n\n  handleBuyScience(event) {\n    console.log(event);\n    const targetScience = this.state.sciences.find(x => x.name === event.target.name);\n    console.log(targetScience);\n    this.buyScience(targetScience);\n  }\n\n  buyScience(science) {\n    const costObjectArray = science.buyPrice;\n    console.log(costObjectArray);\n    const name = science.name;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(resource => {\n        const targetCost = costObjectArray.find(x => x.name === resource.name);\n\n        if (targetCost) {\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4));\n        }\n\n        return resource;\n      });\n      const newSciences = prevState.sciences.map(scienceBuilding => {\n        if (science.name === scienceBuilding.name) {\n          scienceBuilding.isBought = true;\n        }\n\n        return scienceBuilding;\n      });\n      return {\n        resources: newResources,\n        sciences: newSciences\n      };\n    });\n    console.log(this.state);\n    science.unlocks.forEach(lock => this.unlock(lock));\n  }\n\n  unlock(whatToUnlock) {\n    const unlockType = whatToUnlock.type;\n    console.log(unlockType);\n    console.log(\"unlocking\");\n    this.setState(prevState => {\n      console.log(prevState[unlockType]);\n      const newitems = prevState[unlockType].map(item => {\n        if (whatToUnlock.name === item.name) {\n          console.log(whatToUnlock.name, \"isunlocking\");\n          item.isUnlocked = true;\n        }\n\n        return item;\n      });\n      return {\n        [unlockType]: newitems\n      };\n    });\n  }\n\n  handleClicker(event) {\n    console.log(event);\n    console.log(event.target);\n    const {\n      name\n    } = event.target;\n    this.setState(prevState => {\n      const targetClicker = prevState.clickers.find(x => x.name === name);\n\n      if (targetClicker === undefined) {\n        console.error(\"undefined,\", name);\n      }\n\n      const newResources = prevState.resources.map(resource => {\n        const targetIncrease = targetClicker.subjectsOfIncrease.find(x => x.name === resource.name);\n\n        if (targetIncrease) {\n          resource.amount = Number(Math.min(resource.max, resource.amount + targetIncrease.amount).toFixed(4));\n        }\n\n        return resource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  handleUpgrade(event) {\n    console.log(event.target.name);\n    const name = event.target.name;\n    const targetUpgrade = this.state.upgrades.find(x => x.name === name);\n    const type = targetUpgrade.type;\n    const subjects = targetUpgrade.subjectsOfIncrease;\n    subjects.forEach(subject => {\n      this.setState(prevState => {\n        const newItems = prevState[type].map(item => {\n          if (item.name === subject.name) {\n            const newSubjects = item.subjectsOfIncrease.map(x => {\n              x.amount = x.amount + subject.amount;\n            });\n            console.log(\"new subjects\");\n            console.log(newSubjects);\n            item.subjectsOfIncrease = newSubjects;\n          }\n\n          return item;\n        });\n        console.log(newItems);\n        return {\n          [type]: newItems\n        };\n      });\n    });\n  }\n\n  checkBuyingStatus(item) {\n    let type = item.itemType;\n    this.setState(prevState => {\n      const targetResources = prevState.resources.filter(resource => {\n        const targetBuyPriceObject = item.buyPrice.find(x => x.name === resource.name);\n\n        if (targetBuyPriceObject) {\n          return resource;\n        }\n      });\n      const newItem = prevState[type].map(build => {\n        if (build.name === item.name) {\n          const buyStatus = this.buyStatus(targetResources, item.buyPrice);\n          build.isBuyable = buyStatus;\n\n          if (buyStatus) {\n            build.isUnlocked = true;\n          }\n        }\n\n        return build;\n      });\n      return {\n        [type]: newItem\n      };\n    });\n  }\n\n  buyStatus(resourceArray, costArray) {\n    let buyStatus = false;\n    let buyLength = costArray.length;\n    resourceArray.forEach(resource => {\n      const targetCost = costArray.find(x => x.name === resource.name);\n\n      if (targetCost.cost <= resource.amount) {\n        buyLength = buyLength - 1;\n      }\n    });\n\n    if (buyLength === 0) {\n      buyStatus = true;\n    }\n\n    return buyStatus;\n  }\n\n  render() {\n    const buildings = this.state.buildings.map(buildingData => {\n      return /*#__PURE__*/React.createElement(Building, {\n        key: buildingData.id,\n        name: buildingData.name,\n        currentPrices: this.state.resources,\n        handleBuildingBuy: this.handleBuildingBuy,\n        buyPrice: buildingData.buyPrice,\n        count: buildingData.count,\n        subjectsOfIncrease: buildingData.subjectsOfIncrease,\n        isBuyable: buildingData.isBuyable,\n        isUnlocked: buildingData.isUnlocked,\n        subjectData: buildingData.subjectsOfIncrease,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 9\n        }\n      });\n    });\n    const resources = this.state.resources.map(resourceData => {\n      return /*#__PURE__*/React.createElement(Resource, {\n        name: resourceData.name,\n        max: resourceData.max,\n        isUnlocked: resourceData.isUnlocked,\n        changePerTick: resourceData.changePerTick,\n        amount: resourceData.amount,\n        key: resourceData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 9\n        }\n      });\n    });\n    const clickers = this.state.clickers.map(clickerData => {\n      return /*#__PURE__*/React.createElement(Clicker, {\n        name: clickerData.name,\n        handleClicker: this.handleClicker,\n        subjectData: clickerData.subjectsOfIncrease,\n        key: clickerData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 9\n        }\n      });\n    });\n    const sciences = this.state.sciences.map(scienceData => {\n      return /*#__PURE__*/React.createElement(Science, {\n        key: scienceData.id,\n        name: scienceData.name,\n        handleBuyScience: this.handleBuyScience,\n        isBought: scienceData.isBought,\n        currentPrices: this.state.resources,\n        isUnlocked: scienceData.isUnlocked,\n        description: scienceData.description,\n        isBuyable: scienceData.isBuyable,\n        buyPrice: scienceData.buyPrice,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 9\n        }\n      });\n    });\n    const upgrades = this.state.upgrades.map(upgradeData => {\n      return /*#__PURE__*/React.createElement(Upgrade, {\n        key: upgradeData.id,\n        name: upgradeData.name,\n        buyPrice: upgradeData.buyPrice,\n        amount: upgradeData.amount,\n        isUnlocked: upgradeData.isUnlocked,\n        isBuyable: upgradeData.isBuyable,\n        upgradeType: upgradeData.type,\n        handleUpgrade: this.handleUpgrade,\n        currentPrices: this.state.resources,\n        subjectData: upgradeData.subjectsOfIncrease,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }\n    }, \"COLOR CLICKER\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buildingContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }\n    }, buildings), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"resourceContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }\n    }, resources), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clickerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }\n    }, clickers), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scienceContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }\n    }, \" \", sciences), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"upgradeContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }\n    }, upgrades));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/xampp/htdocs/clicker game/clicker-game/src/App.js"],"names":["React","gameData","Building","Resource","Clicker","Science","Upgrade","App","Component","constructor","state","buildings","buildingData","resources","resourceData","clickers","clickerData","sciences","scienceData","upgrades","upgradeData","traders","tradeData","handleClicker","bind","buyBuilding","buyScience","checkBuyingStatus","buyState","buyStatus","handleBuildingBuy","handleUpgrade","unlock","handleBuyScience","gameTime","gameTick","setInterval","forEach","resource","tickResource","checkTicks","building","science","isUnlocked","upgrade","targetResource","setState","prevState","newResources","map","lastResource","name","amount","Number","Math","min","max","changePerTick","toFixed","counterTillStopped","componentDidMount","prevProps","event","target","targetBuilding","find","isBuyable","unlocks","length","whatToUnlock","increaseObjectArray","subjectsOfIncrease","costObjectArray","buyPrice","targetCost","x","targetIncrease","console","log","buildingCount","count","subject","subMax","subAmount","cost","newBuildings","build","increaseRatio","targetScience","newSciences","scienceBuilding","isBought","lock","unlockType","type","newitems","item","targetClicker","undefined","error","targetUpgrade","subjects","newItems","newSubjects","itemType","targetResources","filter","targetBuyPriceObject","newItem","resourceArray","costArray","buyLength","render","id","description"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport gameData from \"./gameData.js\"\r\nimport Building from \"./Building\"\r\nimport Resource from \"./Resource\"\r\nimport Clicker from \"./Clicker\"\r\nimport Science from \"./Science\"\r\nimport Upgrade from \"./Upgrade\"\r\nclass App extends React.Component \r\n  {\r\n  constructor()\r\n    {\r\n    super();\r\n    this.state = {\r\n      buildings:gameData.buildingData,\r\n      resources:gameData.resourceData,\r\n      clickers:gameData.clickerData,\r\n      sciences:gameData.scienceData,\r\n      upgrades:gameData.upgradeData,\r\n      traders:gameData.tradeData\r\n\r\n    };\r\n   this.handleClicker = this.handleClicker.bind(this);\r\n   this.buyBuilding = this.buyBuilding.bind(this);\r\n   this.buyScience = this.buyScience.bind(this);\r\n   this.checkBuyingStatus = this.checkBuyingStatus.bind(this);\r\n   this.buyState = this.buyStatus.bind(this);\r\n   this.handleBuildingBuy = this.handleBuildingBuy.bind(this);\r\n   this.handleUpgrade = this.handleUpgrade.bind(this);\r\n   this.unlock = this.unlock.bind(this);\r\n   this.handleBuyScience=this.handleBuyScience.bind(this);\r\n  }\r\n  gameTime()\r\n    {\r\n    const gameTick = setInterval(()=>\r\n      {\r\n\r\n      this.state.resources.forEach(resource=>this.tickResource(resource));\r\n    },1000);\r\n    const checkTicks = setInterval(()=>\r\n      {\r\n      this.state.buildings.forEach(building=>this.checkBuyingStatus(building));\r\n\r\n      this.state.sciences.forEach(science=>{\r\n        if(science.isUnlocked){\r\n          this.checkBuyingStatus(science);\r\n        }\r\n      });\r\n      this.state.upgrades.forEach(upgrade=>{\r\n        if(upgrade.isUnlocked){\r\n          this.checkBuyingStatus(upgrade);\r\n        }\r\n      })\r\n    },100);\r\n    \r\n  }\r\n\r\n  tickResource(resource)\r\n    {\r\n    const targetResource = resource;  \r\n    this.setState((prevState) =>\r\n      {  \r\n      const newResources = prevState.resources.map(lastResource=>\r\n        {\r\n        if(lastResource.name === targetResource.name)\r\n          {\r\n          resource.amount = Number(Math.min(resource.max,resource.amount + resource.changePerTick).toFixed(4));\r\n          resource.counterTillStopped = Math.max(0, resource.counterTillStopped - resource.changePerTick);\r\n        }\r\n        return lastResource;\r\n      }); \r\n\r\n      return {resources: newResources}\r\n    });\r\n  }\r\n\r\n  componentDidMount(prevProps, prevState)\r\n    {\r\n    this.gameTime(); \r\n  }\r\n  handleBuildingBuy(event)  \r\n    {\r\n    const name = event.target.name;\r\n    const targetBuilding = this.state.buildings.find(building=>building.name === name)\r\n    if(targetBuilding.isBuyable) \r\n      {\r\n      const unlocks = targetBuilding.unlocks;\r\n      if(unlocks.length>0)\r\n        {\r\n        unlocks.forEach(whatToUnlock=>this.unlock(whatToUnlock));\r\n      \r\n         }\r\n\r\n\r\n      \r\n      this.buyBuilding(targetBuilding);\r\n    }\r\n  }\r\n  buyBuilding(building) \r\n    { \r\n    const increaseObjectArray = building.subjectsOfIncrease; \r\n    const costObjectArray = building.buyPrice \r\n    const name = building.name;\r\n    this.setState(prevState=>\r\n      {\r\n     \r\n      const newResources= prevState.resources.map(resource=>\r\n        {\r\n        const targetCost = costObjectArray.find(x=>x.name === resource.name);    \r\n        const targetIncrease = increaseObjectArray.find(x=>x.name===resource.name);\r\n        if(targetIncrease)\r\n          {\r\n           console.log(\"increasing the maximum of resource:\",resource) \r\n          const buildingCount = (building.count + 1);\r\n          const subject = building.subjectsOfIncrease.find(x=>x.name===resource.name);\r\n          const subMax = subject.max;\r\n          const subAmount = subject.amount;\r\n          resource.max = Number((resource.max + subMax).toFixed(4));\r\n          resource.changePerTick = Number((resource.changePerTick + subAmount).toFixed(5));\r\n        }\r\n        if(targetCost)\r\n          {\r\n           console.log(\"this costs this much:\", resource.name, targetCost.cost) \r\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4)); \r\n        }\r\n\r\n\r\n        return resource;\r\n      });\r\n      const newBuildings = prevState.buildings.map(build=>\r\n        {\r\n        if(building.name === build.name)\r\n          {\r\n          build.count = build.count + 1;\r\n          build.buyPrice.forEach(cost=>\r\n            {\r\n            cost.cost = Number((cost.cost * build.increaseRatio).toFixed(4));\r\n          })\r\n\r\n        }\r\n         return build;\r\n      });\r\n\r\n      return{\r\n        resources:newResources,\r\n        buildings:newBuildings,\r\n      }\r\n    });\r\n\r\n  }\r\n  handleBuyScience(event){\r\n    console.log(event);\r\n    const targetScience = this.state.sciences.find(x=>x.name===event.target.name);\r\n    console.log(targetScience);\r\n    this.buyScience(targetScience);\r\n  } \r\n  buyScience(science)\r\n    {\r\n    const costObjectArray = science.buyPrice;\r\n    console.log(costObjectArray) \r\n    const name = science.name;\r\n    this.setState(prevState=>\r\n      {\r\n      const newResources= prevState.resources.map(resource=>\r\n        {\r\n        const targetCost = costObjectArray.find(x=>x.name === resource.name);    \r\n        if(targetCost)\r\n          {\r\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4)); \r\n        }\r\n        return resource;\r\n      });\r\n      const newSciences = prevState.sciences.map(scienceBuilding=>\r\n        {\r\n        if(science.name === scienceBuilding.name)\r\n          {\r\n          scienceBuilding.isBought = true;\r\n          \r\n        }\r\n         return scienceBuilding;\r\n      });\r\n\r\n      return{\r\n        resources:newResources,\r\n        sciences:newSciences,\r\n      }\r\n    });\r\n    console.log(this.state);\r\n    science.unlocks.forEach(lock=>this.unlock(lock));\r\n\r\n\r\n\r\n  }\r\n  unlock(whatToUnlock)\r\n    {\r\n      const unlockType = whatToUnlock.type;\r\n      console.log(unlockType);\r\n      console.log(\"unlocking\");\r\n        this.setState((prevState)=>\r\n          {\r\n           console.log(prevState[unlockType]); \r\n          const newitems = prevState[unlockType].map(item=>\r\n            {\r\n            if(whatToUnlock.name === item.name)\r\n              {\r\n              console.log(whatToUnlock.name,\"isunlocking\");  \r\n              item.isUnlocked = true;\r\n            }\r\n            return item;\r\n          });\r\n          return {[unlockType]:newitems}\r\n        });\r\n    \r\n  }\r\n  handleClicker(event)\r\n    {\r\n     console.log(event);\r\n     console.log(event.target); \r\n    const {name} = event.target;  \r\n    this.setState(prevState=>\r\n      {\r\n      const targetClicker = prevState.clickers.find(x=>x.name === name);\r\n      if(targetClicker === undefined)\r\n        {\r\n        console.error(\"undefined,\",name);}\r\n      const newResources = prevState.resources.map(resource=>\r\n          {\r\n           const targetIncrease =  targetClicker.subjectsOfIncrease.find(x=>x.name===resource.name)\r\n          if(targetIncrease)\r\n            {\r\n            resource.amount = Number(Math.min(resource.max,resource.amount + targetIncrease.amount).toFixed(4));\r\n          }\r\n          return resource;\r\n        });\r\n\r\n\r\n      return {resources:newResources}\r\n    });\r\n\r\n  }\r\n  handleUpgrade(event)\r\n    {\r\n    console.log(event.target.name);\r\n    const name = event.target.name;\r\n    const targetUpgrade = this.state.upgrades.find(x=>x.name===name);\r\n    const type = targetUpgrade.type;\r\n    const subjects = targetUpgrade.subjectsOfIncrease;\r\n    subjects.forEach(subject=>\r\n      {\r\n      this.setState(prevState=>\r\n        {\r\n        const newItems = prevState[type].map(item=>\r\n          {\r\n          if(item.name === subject.name)\r\n            {\r\n            const newSubjects = item.subjectsOfIncrease.map((x)=>\r\n              {\r\n              x.amount = x.amount + subject.amount;\r\n            });\r\n            console.log(\"new subjects\");\r\n            console.log(newSubjects);\r\n            item.subjectsOfIncrease = newSubjects;\r\n          }\r\n        return item;\r\n\r\n\r\n\r\n        })\r\n        console.log(newItems);\r\n        return {[type]:newItems}\r\n\r\n    });\r\n  \r\n\r\n  });\r\n}\r\n  checkBuyingStatus(item)\r\n    {\r\n     let type = item.itemType; \r\n    this.setState((prevState)=>\r\n      {  \r\n      const targetResources = prevState.resources.filter((resource)=>\r\n        {\r\n        const targetBuyPriceObject = item.buyPrice.find(x=>x.name===resource.name);  \r\n        if(targetBuyPriceObject)\r\n          {\r\n          return resource;\r\n        }\r\n      });\r\n      \r\n      const newItem = prevState[type].map((build)=>\r\n        {\r\n        if(build.name === item.name)\r\n          { \r\n          const buyStatus =  this.buyStatus(targetResources, item.buyPrice);\r\n\r\n          build.isBuyable = buyStatus;\r\n\r\n          if(buyStatus){\r\n            build.isUnlocked = true;\r\n          }\r\n        }\r\n\r\n        return build;\r\n      });\r\n\r\n    return{[type]:newItem};\r\n    });\r\n}\r\n\r\n  buyStatus(resourceArray, costArray)\r\n    {\r\n    let buyStatus = false;\r\n    let buyLength = costArray.length;\r\n    resourceArray.forEach(resource=>  \r\n      {\r\n      const targetCost = costArray.find(x=>x.name===resource.name);\r\n      if(targetCost.cost<=resource.amount) \r\n        {\r\n        buyLength = buyLength - 1;\r\n      }\r\n    });\r\n    if(buyLength === 0)\r\n      {\r\n      buyStatus = true;\r\n    }\r\n\r\n    return buyStatus;\r\n  }\r\n\r\n \r\n  \r\n  render()\r\n    {\r\n    const buildings = this.state.buildings.map(buildingData=>\r\n      {\r\n      return(\r\n        <Building \r\n          key={buildingData.id}\r\n          name ={buildingData.name}\r\n          currentPrices = {this.state.resources}\r\n          handleBuildingBuy={this.handleBuildingBuy}\r\n          buyPrice={buildingData.buyPrice}\r\n          count = {buildingData.count}\r\n          subjectsOfIncrease = {buildingData.subjectsOfIncrease}\r\n          isBuyable = {buildingData.isBuyable}\r\n          isUnlocked = {buildingData.isUnlocked}\r\n          subjectData = {buildingData.subjectsOfIncrease}\r\n          \r\n        />)\r\n    });\r\n    const resources = this.state.resources.map(resourceData=>\r\n      {\r\n      return(\r\n        <Resource \r\n          name ={resourceData.name}\r\n          max = {resourceData.max}\r\n          isUnlocked = {resourceData.isUnlocked}\r\n          changePerTick = {resourceData.changePerTick}\r\n          amount={resourceData.amount}\r\n          key={resourceData.name}\r\n\r\n        />)\r\n    });   \r\n    const clickers = this.state.clickers.map(clickerData=>\r\n      {\r\n      return(\r\n        <Clicker\r\n          name={clickerData.name} \r\n          handleClicker = {this.handleClicker}\r\n          subjectData = {clickerData.subjectsOfIncrease}\r\n          key={clickerData.name}\r\n        />\r\n\r\n      )\r\n    });\r\n\r\n    const sciences = this.state.sciences.map(scienceData=>{\r\n      return(\r\n        <Science\r\n          key={scienceData.id}\r\n          name={scienceData.name}\r\n          handleBuyScience = {this.handleBuyScience}\r\n          isBought = {scienceData.isBought}\r\n          currentPrices = {this.state.resources}\r\n\r\n          isUnlocked = {scienceData.isUnlocked}\r\n          description = {scienceData.description}\r\n          isBuyable = {scienceData.isBuyable}\r\n          buyPrice = {scienceData.buyPrice} />\r\n        )\r\n    })\r\n    const upgrades = this.state.upgrades.map(upgradeData=>{\r\n      return(\r\n        <Upgrade \r\n          key={upgradeData.id}\r\n          name = {upgradeData.name}\r\n          buyPrice = {upgradeData.buyPrice}\r\n          amount={upgradeData.amount}\r\n          isUnlocked = {upgradeData.isUnlocked}\r\n          isBuyable = {upgradeData.isBuyable}\r\n          upgradeType = {upgradeData.type}\r\n          handleUpgrade = {this.handleUpgrade}\r\n          currentPrices = {this.state.resources}\r\n          subjectData={upgradeData.subjectsOfIncrease}\r\n\r\n        />\r\n        )\r\n    })\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"title\">COLOR CLICKER</div>\r\n        <div className=\"buildingContainer\">{buildings}</div>\r\n        <div className=\"resourceContainer\">{resources}</div>\r\n        <div className=\"clickerContainer\">{clickers}</div>\r\n        <div className=\"scienceContainer\"> {sciences}</div>\r\n        <div className=\"upgradeContainer\">{upgrades}</div>\r\n      </div>\r\n    );\r\n  } \r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}