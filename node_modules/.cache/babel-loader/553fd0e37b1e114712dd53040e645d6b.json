{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\clicker game\\\\clicker-game\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\";\nimport Building from \"./Building\";\nimport Resource from \"./Resource\";\nimport Clicker from \"./Clicker\";\nimport Science from \"./Science\";\nimport Upgrade from \"./Upgrade\";\nimport Trader from \"./Trader\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.handleClicker = this.handleClicker.bind(this);\n    this.buyBuilding = this.buyBuilding.bind(this);\n    this.buyScience = this.buyScience.bind(this);\n    this.checkBuyingStatus = this.checkBuyingStatus.bind(this);\n    this.buyState = this.buyStatus.bind(this);\n    this.handleBuildingBuy = this.handleBuildingBuy.bind(this);\n    this.handleUpgrade = this.handleUpgrade.bind(this);\n    this.unlock = this.unlock.bind(this);\n    this.handleBuyScience = this.handleBuyScience.bind(this);\n    this.handleTrade = this.handleTrade.bind(this);\n    this.saveGame = this.saveGame.bind(this);\n\n    if (localStorage.getItem(\"save\")) {\n      const savedState = JSON.parse(localStorage.getItem(\"save\"));\n      this.state = {\n        buildings: savedState.buildingData,\n        resources: savedState.resourceData,\n        clickers: savedState.clickerData,\n        sciences: savedState.scienceData,\n        upgrades: savedState.upgradeData,\n        traders: savedState.tradeData\n      };\n    } else {\n      this.state = {\n        buildings: gameData.buildingData,\n        resources: gameData.resourceData,\n        clickers: gameData.clickerData,\n        sciences: gameData.scienceData,\n        upgrades: gameData.upgradeData,\n        traders: gameData.tradeData\n      };\n    }\n  }\n\n  saveGame(state) {\n    const saveState = JSON.stringify(state);\n    localStorage.setItem(\"save\", saveState);\n  }\n\n  gameTime() {\n    const gameTick = setInterval(() => {\n      this.state.resources.forEach(resource => this.tickResource(resource));\n    }, 1000);\n    const checkTicks = setInterval(() => {\n      this.state.buildings.forEach(building => this.checkBuyingStatus(building));\n      this.state.sciences.forEach(science => {\n        if (science.isUnlocked) {\n          this.checkBuyingStatus(science);\n        }\n      });\n      this.state.upgrades.forEach(upgrade => {\n        if (upgrade.isUnlocked) {\n          this.checkBuyingStatus(upgrade);\n        }\n      });\n      this.state.traders.forEach(trade => {\n        if (trade.isUnlocked) {\n          this.checkBuyingStatus(trade);\n        }\n      });\n    }, 100);\n  }\n\n  tickResource(resource) {\n    const targetResource = resource;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(lastResource => {\n        if (lastResource.name === targetResource.name) {\n          resource.amount = Number(Math.min(resource.max, resource.amount + resource.changePerTick).toFixed(4));\n          resource.counterTillStopped = Math.max(0, resource.counterTillStopped - resource.changePerTick);\n        }\n\n        return lastResource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  componentDidMount(prevProps, prevState) {\n    this.gameTime();\n  }\n\n  componentDidUpdate() {\n    this.saveGame(this.state);\n  }\n\n  handleBuildingBuy(event) {\n    const name = event.target.name;\n    const targetBuilding = this.state.buildings.find(building => building.name === name);\n\n    if (targetBuilding.isBuyable) {\n      const unlocks = targetBuilding.unlocks;\n\n      if (unlocks.length > 0) {\n        unlocks.forEach(whatToUnlock => this.unlock(whatToUnlock));\n      }\n\n      this.buyBuilding(targetBuilding);\n    }\n  }\n\n  buyBuilding(building) {\n    const increaseObjectArray = building.subjectsOfIncrease;\n    const costObjectArray = building.buyPrice;\n    const name = building.name;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(resource => {\n        const targetCost = costObjectArray.find(x => x.name === resource.name);\n        const targetIncrease = increaseObjectArray.find(x => x.name === resource.name);\n\n        if (targetIncrease) {\n          console.log(\"increasing the maximum of resource:\", resource);\n          const buildingCount = building.count + 1;\n          const subject = building.subjectsOfIncrease.find(x => x.name === resource.name);\n          const subMax = subject.max;\n          const subAmount = subject.amount;\n          resource.max = Number((resource.max + subMax).toFixed(4));\n          resource.changePerTick = Number((resource.changePerTick + subAmount).toFixed(5));\n        }\n\n        if (targetCost) {\n          console.log(\"this costs this much:\", resource.name, targetCost.cost);\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4));\n        }\n\n        return resource;\n      });\n      const newBuildings = prevState.buildings.map(build => {\n        if (building.name === build.name) {\n          build.count = build.count + 1;\n          build.buyPrice.forEach(cost => {\n            cost.cost = Number((cost.cost * build.increaseRatio).toFixed(4));\n          });\n        }\n\n        return build;\n      });\n      return {\n        resources: newResources,\n        buildings: newBuildings\n      };\n    });\n  }\n\n  handleBuyScience(event) {\n    console.log(event);\n    const targetScience = this.state.sciences.find(x => x.name === event.target.name);\n    console.log(targetScience);\n    this.buyScience(targetScience);\n  }\n\n  buyScience(science) {\n    const costObjectArray = science.buyPrice;\n    console.log(costObjectArray);\n    const name = science.name;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(resource => {\n        const targetCost = costObjectArray.find(x => x.name === resource.name);\n\n        if (targetCost) {\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4));\n        }\n\n        return resource;\n      });\n      const newSciences = prevState.sciences.map(scienceBuilding => {\n        if (science.name === scienceBuilding.name) {\n          scienceBuilding.isBought = true;\n        }\n\n        return scienceBuilding;\n      });\n      return {\n        resources: newResources,\n        sciences: newSciences\n      };\n    });\n    console.log(this.state);\n    science.unlocks.forEach(lock => this.unlock(lock));\n  }\n\n  unlock(whatToUnlock) {\n    const unlockType = whatToUnlock.type;\n    console.log(unlockType);\n    console.log(\"unlocking\");\n    this.setState(prevState => {\n      console.log(prevState[unlockType]);\n      const newitems = prevState[unlockType].map(item => {\n        if (whatToUnlock.name === item.name) {\n          console.log(whatToUnlock.name, \"isunlocking\");\n          item.isUnlocked = true;\n        }\n\n        return item;\n      });\n      return {\n        [unlockType]: newitems\n      };\n    });\n  }\n\n  handleClicker(event) {\n    console.log(event);\n    console.log(event.target);\n    const {\n      name\n    } = event.target;\n    this.setState(prevState => {\n      const targetClicker = prevState.clickers.find(x => x.name === name);\n\n      if (targetClicker === undefined) {\n        console.error(\"undefined,\", name);\n      }\n\n      const newResources = prevState.resources.map(resource => {\n        const targetIncrease = targetClicker.subjectsOfIncrease.find(x => x.name === resource.name);\n\n        if (targetIncrease) {\n          resource.amount = Number(Math.min(resource.max, resource.amount + targetIncrease.amount).toFixed(4));\n        }\n\n        return resource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  handleUpgrade(event) {\n    const name = event.target.name;\n    const targetUpgrade = this.state.upgrades.find(x => x.name === name);\n    const type = targetUpgrade.type;\n    const subjects = targetUpgrade.subjectsOfIncrease;\n    subjects.forEach(subject => {\n      this.setState(prevState => {\n        const newItems = prevState[type].map(item => {\n          if (item.name === subject.name) {\n            const newSubjects = item.subjectsOfIncrease.map(x => {\n              x.amount = Number((x.amount + subject.amount).toFixed(4));\n              return x;\n            });\n            console.log(\"new subjects\");\n            item.subjectsOfIncrease = newSubjects;\n            console.log(item);\n          }\n\n          return item;\n        });\n        const newUpgrades = prevState.upgrades.map(upgrade => {\n          if (upgrade.name === name) {\n            const newPrice = upgrade.buyPrice.map(price => {\n              price.cost = Number((price.cost * 1.54).toFixed(4));\n              return price;\n            });\n            upgrade.buyPrice = newPrice;\n            upgrade.count = upgrade.count + 1;\n            console.log(newPrice);\n          }\n\n          return upgrade;\n        });\n        return {\n          [type]: newItems,\n          upgrades: newUpgrades\n        };\n      });\n    });\n  }\n\n  handleTrade(event) {\n    const targetTrader = this.state.traders.find(x => x.name === event.target.name);\n    const targetItem = event.target.value;\n    console.log(event.target.className, \"is classname\");\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(resource => {\n        if (resource.name === targetTrader.tradeRatios.name) {\n          const tradeRatio = targetTrader.tradeRatios.in;\n          resource.amount = Number((resource.amount - tradeRatio).toFixed(4));\n        }\n\n        if (resource.name === targetItem) {\n          console.log(\"adding to \", resource.name, \"becuase target is\", targetItem);\n          const tradeRatio = targetTrader.tradeRatios.out;\n          resource.amount = Number((resource.amount + tradeRatio).toFixed(4));\n        }\n\n        return resource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  checkBuyingStatus(item) {\n    let type = item.itemType;\n    this.setState(prevState => {\n      const targetResources = prevState.resources.filter(resource => {\n        const targetBuyPriceObject = item.buyPrice.find(x => x.name === resource.name);\n\n        if (targetBuyPriceObject) {\n          return resource;\n        }\n      });\n      const newItem = prevState[type].map(build => {\n        if (build.name === item.name) {\n          const buyStatus = this.buyStatus(targetResources, item.buyPrice);\n          build.isBuyable = buyStatus;\n\n          if (buyStatus) {\n            build.isUnlocked = true;\n          }\n        }\n\n        return build;\n      });\n      return {\n        [type]: newItem\n      };\n    });\n  }\n\n  buyStatus(resourceArray, costArray) {\n    let buyStatus = false;\n    let buyLength = costArray.length;\n    resourceArray.forEach(resource => {\n      const targetCost = costArray.find(x => x.name === resource.name);\n\n      if (targetCost.cost <= resource.amount) {\n        buyLength = buyLength - 1;\n      }\n    });\n\n    if (buyLength === 0) {\n      buyStatus = true;\n    }\n\n    return buyStatus;\n  }\n\n  render() {\n    const buildings = this.state.buildings.map(buildingData => {\n      return /*#__PURE__*/React.createElement(Building, {\n        key: buildingData.id,\n        name: buildingData.name,\n        currentPrices: this.state.resources,\n        handleBuildingBuy: this.handleBuildingBuy,\n        buyPrice: buildingData.buyPrice,\n        count: buildingData.count,\n        subjectsOfIncrease: buildingData.subjectsOfIncrease,\n        isBuyable: buildingData.isBuyable,\n        isUnlocked: buildingData.isUnlocked,\n        subjectData: buildingData.subjectsOfIncrease,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 9\n        }\n      });\n    });\n    const resources = this.state.resources.map(resourceData => {\n      return /*#__PURE__*/React.createElement(Resource, {\n        name: resourceData.name,\n        max: resourceData.max,\n        isUnlocked: resourceData.isUnlocked,\n        changePerTick: resourceData.changePerTick,\n        amount: resourceData.amount,\n        key: resourceData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 9\n        }\n      });\n    });\n    const clickers = this.state.clickers.map(clickerData => {\n      return /*#__PURE__*/React.createElement(Clicker, {\n        name: clickerData.name,\n        handleClicker: this.handleClicker,\n        subjectData: clickerData.subjectsOfIncrease,\n        key: clickerData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 9\n        }\n      });\n    });\n    const sciences = this.state.sciences.map(scienceData => {\n      return /*#__PURE__*/React.createElement(Science, {\n        key: scienceData.id,\n        name: scienceData.name,\n        handleBuyScience: this.handleBuyScience,\n        isBought: scienceData.isBought,\n        currentPrices: this.state.resources,\n        isUnlocked: scienceData.isUnlocked,\n        description: scienceData.description,\n        isBuyable: scienceData.isBuyable,\n        buyPrice: scienceData.buyPrice,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 9\n        }\n      });\n    });\n    const upgrades = this.state.upgrades.map(upgradeData => {\n      return /*#__PURE__*/React.createElement(Upgrade, {\n        key: upgradeData.id,\n        name: upgradeData.name,\n        buyPrice: upgradeData.buyPrice,\n        amount: upgradeData.amount,\n        isUnlocked: upgradeData.isUnlocked,\n        isBuyable: upgradeData.isBuyable,\n        upgradeType: upgradeData.type,\n        count: upgradeData.count,\n        handleUpgrade: this.handleUpgrade,\n        currentPrices: this.state.resources,\n        subjectData: upgradeData.subjectsOfIncrease,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 9\n        }\n      });\n    });\n    const traders = this.state.traders.map(traderData => {\n      const canTradeWith = this.state.resources.filter(resource => traderData.tradeRatios.allowed === resource.type);\n      return /*#__PURE__*/React.createElement(Trader, {\n        key: traderData.id,\n        name: traderData.name,\n        tradeRatio: traderData.tradeRatios,\n        isUnlocked: traderData.isUnlocked,\n        isBuyable: traderData.isBuyable,\n        handleTrade: this.handleTrade,\n        canTradeWith: canTradeWith,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }\n    }, \"COLOR CLICKER\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buildingContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }\n    }, buildings), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"resourceContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }\n    }, resources), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clickerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }\n    }, clickers), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scienceContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }\n    }, \" \", sciences), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"upgradeContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }\n    }, upgrades), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"traderContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }\n    }, traders));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/xampp/htdocs/clicker game/clicker-game/src/App.js"],"names":["React","gameData","Building","Resource","Clicker","Science","Upgrade","Trader","App","Component","constructor","handleClicker","bind","buyBuilding","buyScience","checkBuyingStatus","buyState","buyStatus","handleBuildingBuy","handleUpgrade","unlock","handleBuyScience","handleTrade","saveGame","localStorage","getItem","savedState","JSON","parse","state","buildings","buildingData","resources","resourceData","clickers","clickerData","sciences","scienceData","upgrades","upgradeData","traders","tradeData","saveState","stringify","setItem","gameTime","gameTick","setInterval","forEach","resource","tickResource","checkTicks","building","science","isUnlocked","upgrade","trade","targetResource","setState","prevState","newResources","map","lastResource","name","amount","Number","Math","min","max","changePerTick","toFixed","counterTillStopped","componentDidMount","prevProps","componentDidUpdate","event","target","targetBuilding","find","isBuyable","unlocks","length","whatToUnlock","increaseObjectArray","subjectsOfIncrease","costObjectArray","buyPrice","targetCost","x","targetIncrease","console","log","buildingCount","count","subject","subMax","subAmount","cost","newBuildings","build","increaseRatio","targetScience","newSciences","scienceBuilding","isBought","lock","unlockType","type","newitems","item","targetClicker","undefined","error","targetUpgrade","subjects","newItems","newSubjects","newUpgrades","newPrice","price","targetTrader","targetItem","value","className","tradeRatios","tradeRatio","in","out","itemType","targetResources","filter","targetBuyPriceObject","newItem","resourceArray","costArray","buyLength","render","id","description","traderData","canTradeWith","allowed"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport gameData from \"./gameData.js\"\r\nimport Building from \"./Building\"\r\nimport Resource from \"./Resource\"\r\nimport Clicker from \"./Clicker\"\r\nimport Science from \"./Science\"\r\nimport Upgrade from \"./Upgrade\"\r\nimport Trader from \"./Trader\"\r\n\r\nclass App extends React.Component \r\n  {\r\n  constructor()\r\n    {\r\n    super();\r\n   this.handleClicker = this.handleClicker.bind(this);\r\n   this.buyBuilding = this.buyBuilding.bind(this);\r\n   this.buyScience = this.buyScience.bind(this);\r\n   this.checkBuyingStatus = this.checkBuyingStatus.bind(this);\r\n   this.buyState = this.buyStatus.bind(this);\r\n   this.handleBuildingBuy = this.handleBuildingBuy.bind(this);\r\n   this.handleUpgrade = this.handleUpgrade.bind(this);\r\n   this.unlock = this.unlock.bind(this);\r\n   this.handleBuyScience=this.handleBuyScience.bind(this);\r\n   this.handleTrade=this.handleTrade.bind(this);\r\n   this.saveGame=this.saveGame.bind(this);\r\n   if(localStorage.getItem(\"save\")) \r\n      {\r\n      const savedState = JSON.parse(localStorage.getItem(\"save\"));\r\n      this.state =\r\n        {\r\n        buildings:savedState.buildingData,\r\n        resources:savedState.resourceData,\r\n        clickers:savedState.clickerData,\r\n        sciences:savedState.scienceData,\r\n        upgrades:savedState.upgradeData,\r\n        traders:savedState.tradeData  \r\n      };\r\n\r\n    }\r\n    else{\r\n      this.state = \r\n        {\r\n        buildings:gameData.buildingData,\r\n        resources:gameData.resourceData,\r\n        clickers:gameData.clickerData,\r\n        sciences:gameData.scienceData,\r\n        upgrades:gameData.upgradeData,\r\n        traders:gameData.tradeData\r\n      }\r\n    \r\n\r\n\r\n\r\n    }\r\n  }\r\n  saveGame(state){\r\n\r\n    const saveState = JSON.stringify(state);\r\n    localStorage.setItem(\"save\",saveState);\r\n  }\r\n  gameTime()\r\n    {\r\n    const gameTick = setInterval(()=>\r\n      {\r\n\r\n      this.state.resources.forEach(resource=>this.tickResource(resource));\r\n    },1000);\r\n    const checkTicks = setInterval(()=>\r\n      {\r\n      this.state.buildings.forEach(building=>this.checkBuyingStatus(building));\r\n\r\n      this.state.sciences.forEach(science=>{\r\n        if(science.isUnlocked){\r\n          this.checkBuyingStatus(science);\r\n        }\r\n      });\r\n      this.state.upgrades.forEach(upgrade=>{\r\n        if(upgrade.isUnlocked){\r\n          this.checkBuyingStatus(upgrade);\r\n        }\r\n      })\r\n      this.state.traders.forEach(trade=>{\r\n        if(trade.isUnlocked)\r\n          {\r\n          this.checkBuyingStatus(trade);\r\n        }\r\n      })\r\n    },100);\r\n    \r\n  }\r\n\r\n  tickResource(resource)\r\n    {\r\n    const targetResource = resource;  \r\n    this.setState((prevState) =>\r\n      {  \r\n      const newResources = prevState.resources.map(lastResource=>\r\n        {\r\n        if(lastResource.name === targetResource.name)\r\n          {\r\n          resource.amount = Number(Math.min(resource.max,resource.amount + resource.changePerTick).toFixed(4));\r\n          resource.counterTillStopped = Math.max(0, resource.counterTillStopped - resource.changePerTick);\r\n        }\r\n        return lastResource;\r\n      }); \r\n\r\n      return {resources: newResources}\r\n    });\r\n  }\r\n\r\n  componentDidMount(prevProps, prevState)\r\n    {\r\n\r\n    this.gameTime(); \r\n  }\r\n  componentDidUpdate()\r\n    {\r\n    this.saveGame(this.state);\r\n  }\r\n  handleBuildingBuy(event)  \r\n    {\r\n    const name = event.target.name;\r\n    const targetBuilding = this.state.buildings.find(building=>building.name === name)\r\n    if(targetBuilding.isBuyable) \r\n      {\r\n      const unlocks = targetBuilding.unlocks;\r\n      if(unlocks.length>0)\r\n        {\r\n        unlocks.forEach(whatToUnlock=>this.unlock(whatToUnlock));\r\n      \r\n         }\r\n\r\n\r\n      \r\n      this.buyBuilding(targetBuilding);\r\n    }\r\n  }\r\n  buyBuilding(building) \r\n    { \r\n    const increaseObjectArray = building.subjectsOfIncrease; \r\n    const costObjectArray = building.buyPrice \r\n    const name = building.name;\r\n    this.setState(prevState=>\r\n      {\r\n     \r\n      const newResources= prevState.resources.map(resource=>\r\n        {\r\n        const targetCost = costObjectArray.find(x=>x.name === resource.name);    \r\n        const targetIncrease = increaseObjectArray.find(x=>x.name===resource.name);\r\n        if(targetIncrease)\r\n          {\r\n           console.log(\"increasing the maximum of resource:\",resource) \r\n          const buildingCount = (building.count + 1);\r\n          const subject = building.subjectsOfIncrease.find(x=>x.name===resource.name);\r\n          const subMax = subject.max;\r\n          const subAmount = subject.amount;\r\n          resource.max = Number((resource.max + subMax).toFixed(4));\r\n          resource.changePerTick = Number((resource.changePerTick + subAmount).toFixed(5));\r\n        }\r\n        if(targetCost)\r\n          {\r\n           console.log(\"this costs this much:\", resource.name, targetCost.cost) \r\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4)); \r\n        }\r\n\r\n\r\n        return resource;\r\n      });\r\n      const newBuildings = prevState.buildings.map(build=>\r\n        {\r\n        if(building.name === build.name)\r\n          {\r\n          build.count = build.count + 1;\r\n          build.buyPrice.forEach(cost=>\r\n            {\r\n            cost.cost = Number((cost.cost * build.increaseRatio).toFixed(4));\r\n          })\r\n\r\n        }\r\n         return build;\r\n      });\r\n\r\n      return{\r\n        resources:newResources,\r\n        buildings:newBuildings,\r\n      }\r\n    });\r\n\r\n  }\r\n  handleBuyScience(event){\r\n    console.log(event);\r\n    const targetScience = this.state.sciences.find(x=>x.name===event.target.name);\r\n    console.log(targetScience);\r\n    this.buyScience(targetScience);\r\n  } \r\n  buyScience(science)\r\n    {\r\n    const costObjectArray = science.buyPrice;\r\n    console.log(costObjectArray) \r\n    const name = science.name;\r\n    this.setState(prevState=>\r\n      {\r\n      const newResources= prevState.resources.map(resource=>\r\n        {\r\n        const targetCost = costObjectArray.find(x=>x.name === resource.name);    \r\n        if(targetCost)\r\n          {\r\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4)); \r\n        }\r\n        return resource;\r\n      });\r\n      const newSciences = prevState.sciences.map(scienceBuilding=>\r\n        {\r\n        if(science.name === scienceBuilding.name)\r\n          {\r\n          scienceBuilding.isBought = true;\r\n          \r\n        }\r\n         return scienceBuilding;\r\n      });\r\n\r\n      return{\r\n        resources:newResources,\r\n        sciences:newSciences,\r\n      }\r\n    });\r\n    console.log(this.state);\r\n    science.unlocks.forEach(lock=>this.unlock(lock));\r\n\r\n\r\n\r\n  }\r\n  unlock(whatToUnlock)\r\n    {\r\n      const unlockType = whatToUnlock.type;\r\n      console.log(unlockType);\r\n      console.log(\"unlocking\");\r\n        this.setState((prevState)=>\r\n          {\r\n           console.log(prevState[unlockType]); \r\n          const newitems = prevState[unlockType].map(item=>\r\n            {\r\n            if(whatToUnlock.name === item.name)\r\n              {\r\n              console.log(whatToUnlock.name,\"isunlocking\");  \r\n              item.isUnlocked = true;\r\n            }\r\n            return item;\r\n          });\r\n          return {[unlockType]:newitems}\r\n        });\r\n    \r\n  }\r\n  handleClicker(event)\r\n    {\r\n     console.log(event);\r\n     console.log(event.target); \r\n    const {name} = event.target;  \r\n    this.setState(prevState=>\r\n      {\r\n      const targetClicker = prevState.clickers.find(x=>x.name === name);\r\n      if(targetClicker === undefined)\r\n        {\r\n        console.error(\"undefined,\",name);}\r\n      const newResources = prevState.resources.map(resource=>\r\n          {\r\n           const targetIncrease =  targetClicker.subjectsOfIncrease.find(x=>x.name===resource.name)\r\n          if(targetIncrease)\r\n            {\r\n            resource.amount = Number(Math.min(resource.max,resource.amount + targetIncrease.amount).toFixed(4));\r\n          }\r\n          return resource;\r\n        });\r\n\r\n\r\n      return {resources:newResources}\r\n    });\r\n\r\n  }\r\n  handleUpgrade(event)\r\n    {\r\n    const name = event.target.name;\r\n    const targetUpgrade = this.state.upgrades.find(x=>x.name===name);\r\n    const type = targetUpgrade.type;\r\n    const subjects = targetUpgrade.subjectsOfIncrease;\r\n    subjects.forEach(subject=>\r\n      {\r\n      this.setState(prevState=>\r\n        {\r\n\r\n        const newItems = prevState[type].map(item=>\r\n          {\r\n          if(item.name === subject.name)\r\n            {\r\n            const newSubjects = item.subjectsOfIncrease.map((x)=>\r\n              {\r\n              x.amount = Number((x.amount + subject.amount).toFixed(4));\r\n              return x;\r\n            });\r\n            console.log(\"new subjects\");\r\n            item.subjectsOfIncrease = newSubjects;\r\n            console.log(item)\r\n           \r\n          }\r\n          return item;\r\n        })\r\n        const newUpgrades = prevState.upgrades.map(upgrade=>\r\n          {\r\n          if(upgrade.name === name) \r\n            {\r\n            const newPrice = upgrade.buyPrice.map(price=>\r\n              {\r\n              price.cost = Number((price.cost*1.54).toFixed(4));\r\n              return price;\r\n            })\r\n            upgrade.buyPrice = newPrice;\r\n            upgrade.count = upgrade.count + 1;\r\n            console.log(newPrice);\r\n          }\r\n          return upgrade;\r\n        })\r\n      \r\n\r\n        return {[type]:newItems, upgrades:newUpgrades}\r\n\r\n    });\r\n    });\r\n  }\r\n\r\n  handleTrade(event){\r\n    const targetTrader = this.state.traders.find(x=>x.name===event.target.name);\r\n    const targetItem = event.target.value;\r\n    console.log(event.target.className, \"is classname\");\r\n\r\n\r\n    this.setState(prevState=>{\r\n      const newResources = prevState.resources.map(resource=>{\r\n        if(resource.name ===targetTrader.tradeRatios.name)\r\n          {\r\n          const tradeRatio = targetTrader.tradeRatios.in; \r\n          resource.amount = Number((resource.amount - tradeRatio).toFixed(4));\r\n        }\r\n        if(resource.name ===targetItem)\r\n          {\r\n           console.log(\"adding to \", resource.name,\"becuase target is\", targetItem) \r\n          const tradeRatio = targetTrader.tradeRatios.out;\r\n          resource.amount = Number((resource.amount + tradeRatio).toFixed(4));\r\n\r\n        }\r\n      return resource;\r\n      });\r\n\r\n\r\n      return{resources:newResources}\r\n    })\r\n  }\r\n\r\n\r\n  checkBuyingStatus(item)\r\n    {\r\n     let type = item.itemType; \r\n    this.setState((prevState)=>\r\n      {  \r\n      const targetResources = prevState.resources.filter((resource)=>\r\n        {\r\n        const targetBuyPriceObject = item.buyPrice.find(x=>x.name===resource.name);  \r\n        if(targetBuyPriceObject)\r\n          {\r\n          return resource;\r\n        }\r\n      });\r\n      \r\n      const newItem = prevState[type].map((build)=>\r\n        {\r\n        if(build.name === item.name)\r\n          { \r\n          const buyStatus =  this.buyStatus(targetResources, item.buyPrice);\r\n\r\n          build.isBuyable = buyStatus;\r\n\r\n          if(buyStatus){\r\n            build.isUnlocked = true;\r\n          }\r\n        }\r\n\r\n        return build;\r\n      });\r\n\r\n    return{[type]:newItem};\r\n    });\r\n  }\r\n\r\n  buyStatus(resourceArray, costArray)\r\n    {\r\n    let buyStatus = false;\r\n    let buyLength = costArray.length;\r\n    resourceArray.forEach(resource=>  \r\n      {\r\n      const targetCost = costArray.find(x=>x.name===resource.name);\r\n      if(targetCost.cost<=resource.amount) \r\n        {\r\n        buyLength = buyLength - 1;\r\n      }\r\n    });\r\n    if(buyLength === 0)\r\n      {\r\n      buyStatus = true;\r\n    }\r\n\r\n    return buyStatus;\r\n  }\r\n  render()\r\n    {\r\n    const buildings = this.state.buildings.map(buildingData=>\r\n      {\r\n      return(\r\n        <Building \r\n          key={buildingData.id}\r\n          name ={buildingData.name}\r\n          currentPrices = {this.state.resources}\r\n          handleBuildingBuy={this.handleBuildingBuy}\r\n          buyPrice={buildingData.buyPrice}\r\n          count = {buildingData.count}\r\n          subjectsOfIncrease = {buildingData.subjectsOfIncrease}\r\n          isBuyable = {buildingData.isBuyable}\r\n          isUnlocked = {buildingData.isUnlocked}\r\n          subjectData = {buildingData.subjectsOfIncrease}\r\n          \r\n        />)\r\n    });\r\n    const resources = this.state.resources.map(resourceData=>\r\n      {\r\n      return(\r\n        <Resource \r\n          name ={resourceData.name}\r\n          max = {resourceData.max}\r\n          isUnlocked = {resourceData.isUnlocked}\r\n          changePerTick = {resourceData.changePerTick}\r\n          amount={resourceData.amount}\r\n          key={resourceData.name}\r\n\r\n        />)\r\n    });   \r\n    const clickers = this.state.clickers.map(clickerData=>\r\n      {\r\n      return(\r\n        <Clicker\r\n          name={clickerData.name} \r\n          handleClicker = {this.handleClicker}\r\n          subjectData = {clickerData.subjectsOfIncrease}\r\n          key={clickerData.name}\r\n        />\r\n\r\n      )\r\n    });\r\n\r\n    const sciences = this.state.sciences.map(scienceData=>{\r\n      return(\r\n        <Science\r\n          key={scienceData.id}\r\n          name={scienceData.name}\r\n          handleBuyScience = {this.handleBuyScience}\r\n          isBought = {scienceData.isBought}\r\n          currentPrices = {this.state.resources}\r\n\r\n          isUnlocked = {scienceData.isUnlocked}\r\n          description = {scienceData.description}\r\n          isBuyable = {scienceData.isBuyable}\r\n          buyPrice = {scienceData.buyPrice} />\r\n        )\r\n    })\r\n    const upgrades = this.state.upgrades.map(upgradeData=>{\r\n      return(\r\n        <Upgrade \r\n          key={upgradeData.id}\r\n          name = {upgradeData.name}\r\n          buyPrice = {upgradeData.buyPrice}\r\n          amount={upgradeData.amount}\r\n          isUnlocked = {upgradeData.isUnlocked}\r\n          isBuyable = {upgradeData.isBuyable}\r\n          upgradeType = {upgradeData.type}\r\n          count={upgradeData.count}\r\n          handleUpgrade = {this.handleUpgrade}\r\n          currentPrices = {this.state.resources}\r\n          subjectData={upgradeData.subjectsOfIncrease}\r\n\r\n        />\r\n        )\r\n    })\r\n    const traders = this.state.traders.map(traderData=>{\r\n      const canTradeWith = this.state.resources.filter(resource=>traderData.tradeRatios.allowed === resource.type);\r\n      return(\r\n        <Trader\r\n          key={traderData.id}\r\n          name = {traderData.name}\r\n          tradeRatio = {traderData.tradeRatios}\r\n          isUnlocked = {traderData.isUnlocked}\r\n          isBuyable = {traderData.isBuyable}\r\n          handleTrade = {this.handleTrade}\r\n          canTradeWith = {canTradeWith}\r\n         />\r\n\r\n\r\n\r\n\r\n        )\r\n\r\n\r\n    })\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"title\">COLOR CLICKER</div>\r\n        <div className=\"buildingContainer\">{buildings}</div>\r\n        <div className=\"resourceContainer\">{resources}</div>\r\n        <div className=\"clickerContainer\">{clickers}</div>\r\n        <div className=\"scienceContainer\"> {sciences}</div>\r\n        <div className=\"upgradeContainer\">{upgrades}</div>\r\n        <div className=\"traderContainer\">{traders}</div>\r\n      </div>\r\n    );\r\n  } \r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}