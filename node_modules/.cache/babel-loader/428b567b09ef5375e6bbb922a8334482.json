{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\clicker game\\\\clicker-game\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\";\nimport Building from \"./Building\";\nimport Resource from \"./Resource\";\nimport Clicker from \"./Clicker\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      //   buildings:gameData.buildingData,\n      resources: gameData.resourceData,\n      clickers: gameData.clickerData\n    }; // this.HandleClick = this.HandleClick.bind(this);\n    //  this.HandleChange = this.HandleChange.bind(this);\n    //  this.buy = this.buy.bind(this);\n\n    this.gainResource = this.gainResource.bind(this);\n  }\n\n  HandleChange(event) {}\n  /* HandleClick(event)\n     {\n     const name = event.target.name;\n     const target = this.state.buildings.find(building=>building.name===name);\n     const countCurrent= target.count + 1;\n     console.log(\"Test test test\");\n      if(target.isBuyable === true)\n       {\n       this.buy(target);  \n       let lastBuildings = this.state.buildings.slice();\n       let newBuildings = lastBuildings.map(building=>\n         {\n         if(building.name === name)\n           building.count = countCurrent;\n         return building;\n       }\n        )\n       this.setState({buildings:newBuildings});\n     }\n      else{\n       console.log(\"notBuyable\");\n     }\n   }\n  \n   buy(target) \n     { \n            console.log(\"test test buy\");\n  \n     const cost = Array.from(target.buyPrice);\n     let lastResources = this.state.resources.slice();\n     let newResources = lastResources.map(resource=>resource -= cost.filter(price=> price === resource))\n     this.setState({resouces:newResources});\n   } */\n\n\n  gainResource(event) {\n    console.count(\"gain button\");\n    const name = event.target.name;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(resource => {\n        if (resource.name === name) {\n          resource.amount = Number(resource.amount) + 1; //Number(prevState.clickers.find(x=>x.name===name).value)\n        }\n\n        return resource;\n      });\n      console.log(prevState.resources.find(item => item.name === name).amount, \"old\");\n      console.log(newResources.find(item => item.name === name).amount, \"new\");\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  render() {\n    /* const buildings = this.state.buildings.map(buildingData=>\n       {\n       return(\n         <Building \n           name ={buildingData.name}\n           buyPrice={buildingData.buyPrice}\n           count = {buildingData.count}\n           subjectsOfIncrease = {buildingData.subjectsOfIncrease}\n           isBuyable = {buildingData.isBuyable}\n           sellPrice = {buildingData.sellPrice}\n           isUnlocked = {buildingData.isUnlocked}\n           HandleClick = {this.HandleClick}\n           key={buildingData.name}\n           \n         />)\n     });*/\n    const resources = this.state.resources.map(resourceData => {\n      return /*#__PURE__*/React.createElement(Resource, {\n        name: resourceData.name,\n        resouceMax: resourceData.resourceMax,\n        isUnlocked: resourceData.isUnlocked,\n        changePerTick: resourceData.changePerTick,\n        counterTillStopped: resourceData.countTillStopped,\n        amount: resourceData.amount,\n        key: resourceData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      });\n    });\n    const clickers = this.state.clickers.map(clickerData => {\n      return /*#__PURE__*/React.createElement(Clicker, {\n        name: clickerData.name,\n        HandleClick: this.gainResource,\n        value: clickerData.amount,\n        key: clickerData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, buildings, resources, clickers);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/xampp/htdocs/clicker game/clicker-game/src/App.js"],"names":["React","gameData","Building","Resource","Clicker","App","Component","constructor","state","resources","resourceData","clickers","clickerData","gainResource","bind","HandleChange","event","console","count","name","target","setState","prevState","newResources","map","resource","amount","Number","log","find","item","render","resourceMax","isUnlocked","changePerTick","countTillStopped","buildings"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\"\nimport Building from \"./Building\"\nimport Resource from \"./Resource\"\nimport Clicker from \"./Clicker\"\nclass App extends React.Component \n  {\n  constructor()\n    {\n    super();\n    this.state = {\n   //   buildings:gameData.buildingData,\n      resources:gameData.resourceData,\n      clickers:gameData.clickerData\n\n    };\n  // this.HandleClick = this.HandleClick.bind(this);\n //  this.HandleChange = this.HandleChange.bind(this);\n //  this.buy = this.buy.bind(this);\n   this.gainResource = this.gainResource.bind(this);\n\n  }\n  HandleChange(event)\n    {\n\n  }\n /* HandleClick(event)\n    {\n    const name = event.target.name;\n    const target = this.state.buildings.find(building=>building.name===name);\n    const countCurrent= target.count + 1;\n    console.log(\"Test test test\");\n\n    if(target.isBuyable === true)\n      {\n      this.buy(target);  \n      let lastBuildings = this.state.buildings.slice();\n      let newBuildings = lastBuildings.map(building=>\n        {\n        if(building.name === name)\n          building.count = countCurrent;\n        return building;\n      }\n\n      )\n\n     this.setState({buildings:newBuildings});\n    }\n\n    else{\n      console.log(\"notBuyable\");\n    }\n  }\n \n  buy(target) \n    { \n           console.log(\"test test buy\");\n \n    const cost = Array.from(target.buyPrice);\n    let lastResources = this.state.resources.slice();\n    let newResources = lastResources.map(resource=>resource -= cost.filter(price=> price === resource))\n    this.setState({resouces:newResources});\n  } */\n  gainResource(event)\n    {\n    console.count(\"gain button\");\n    const name = event.target.name;\n    this.setState( (prevState)=>\n      {\n      const newResources =  prevState.resources.map(resource=>\n        {\n        if(resource.name === name)  \n          {\n          resource.amount = Number(resource.amount) + 1 //Number(prevState.clickers.find(x=>x.name===name).value)\n        }  \n        return resource;\n      });\n      console.log(prevState.resources.find(item=>item.name===name).amount, \"old\");\n      console.log(newResources.find(item=>item.name===name).amount, \"new\");\n      return {resources: newResources}\n    });\n  }\n  render()\n    {\n   /* const buildings = this.state.buildings.map(buildingData=>\n      {\n      return(\n        <Building \n          name ={buildingData.name}\n          buyPrice={buildingData.buyPrice}\n          count = {buildingData.count}\n          subjectsOfIncrease = {buildingData.subjectsOfIncrease}\n          isBuyable = {buildingData.isBuyable}\n          sellPrice = {buildingData.sellPrice}\n          isUnlocked = {buildingData.isUnlocked}\n          HandleClick = {this.HandleClick}\n          key={buildingData.name}\n          \n        />)\n    });*/\n    const resources = this.state.resources.map(resourceData=>\n      {\n      return(\n\n        <Resource \n         name ={resourceData.name}\n         resouceMax = {resourceData.resourceMax}\n          isUnlocked = {resourceData.isUnlocked}\n          changePerTick = {resourceData.changePerTick}\n          counterTillStopped = {resourceData.countTillStopped}\n          amount={resourceData.amount}\n                 key={resourceData.name}\n\n        />)\n    })   \n\n    const clickers = this.state.clickers.map(clickerData=>\n      {\n      return(\n        <Clicker\n          name={clickerData.name}  \n          HandleClick = {this.gainResource}\n          value = {clickerData.amount}\n          key={clickerData.name}\n\n        />\n\n        )\n    })\n\n\n\n\n  return (\n\n        <div className=\"App\">\n        {buildings}\n        {resources}\n        {clickers}\n        </div>\n       );\n      }\n    \n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}