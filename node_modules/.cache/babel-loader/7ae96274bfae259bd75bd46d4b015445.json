{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\clicker game\\\\clicker-game\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\";\nimport Building from \"./Building\";\nimport Resource from \"./Resource\";\nimport Clicker from \"./Clicker\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      buildings: gameData.buildingData,\n      resources: gameData.resourceData,\n      clickers: gameData.clickerData\n    };\n    this.handleClicker = this.handleClicker.bind(this);\n    this.buy = this.buy.bind(this);\n    this.checkBuyingStatus = this.checkBuyingStatus.bind(this);\n    this.buyState = this.buyStatus.bind(this);\n    this.handleBuildingBuy = this.handleBuildingBuy.bind(this);\n  }\n\n  gameTime() {\n    const gameTick = setInterval(() => {\n      this.state.resources.forEach(resource => this.tickResource(resource));\n      this.state.buildings.forEach(building => this.checkBuyingStatus(building));\n    }, 100);\n  }\n\n  tickResource(resource) {\n    const targetResource = resource;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(lastResource => {\n        if (lastResource.name === targetResource.name) {\n          resource.amount = Number(Math.min(resource.max, resource.amount + resource.changePerTick).toFixed(4));\n          resource.counterTillStopped = Math.max(0, resource.counterTillStopped - resource.changePerTick);\n        }\n\n        return lastResource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  componentDidMount(prevProps, prevState) {\n    this.gameTime();\n  }\n\n  handleBuildingBuy(event) {\n    console.log(event.target);\n    const name = event.target.name;\n    const targetBuilding = this.state.buildings.find(building => building.name === name);\n\n    if (targetBuilding.isBuyable) {\n      this.buy(targetBuilding);\n    }\n  }\n\n  buy(building) {\n    const increaseObjectArray = building.subjectsOfIncrease;\n    const costObjectArray = building.buyPrice;\n    const name = building.name;\n    this.setState(prevState => {\n      const newClickers = prevState.clickers.map(clicker => {\n        const increase = increaseObjectArray.find(x => x.name === clicker.name);\n\n        if (clicker.building && increase) {\n          clicker.amount = clicker.amount + increase.amount;\n        }\n\n        return clicker;\n      });\n      const minusCostResources = prevState.resouces.map(resource => {\n        const targetCost = increaseObjectArray.find(x => x.name === resource.name);\n\n        if (targetCost) {\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4));\n          resource.max = Number(resource.max + building.subjectsOfIncrease.find(x => x.name === resource.name).max);\n        }\n\n        return resource;\n      });\n      const newBuildings = prevState.buildings.map(build => {\n        if (building.name === build.name) {\n          build.count = build.count + 1;\n          build.buyPrice.forEach(cost => {\n            cost.cost = Number(cost * Number(\"1\" + build.increaseRatio).toFixed(4));\n          });\n        }\n\n        return build;\n      });\n      return {\n        resources: newResources,\n        buildings: newBuildings,\n        clickers: newClickers\n      };\n    });\n  }\n\n  handleClicker(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState(prevState => {\n      const targetClicker = prevState.clickers.find(x => x.name === name);\n      const newResources = prevState.resources.map(resource => {\n        const targetIncrease = targetClicker.subjectsOfIncrease.find(x => x.name === resource.name);\n\n        if (targetIncrease) {\n          resource.amount = Number(Math.min(resource.max, resource.amount + targetIncrease.amount).toFixed(4));\n        }\n\n        return resource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  checkBuyingStatus(building) {\n    this.setState(prevState => {\n      const targetResources = prevState.resources.filter(resource => {\n        const targetBuyPriceObject = building.buyPrice.find(x => x.name === resource.name);\n\n        if (targetBuyPriceObject) {\n          return resource;\n        }\n      });\n      const newBuildings = prevState.buildings.map(build => {\n        if (build.name === building.name) {\n          const buyStatus = this.buyStatus(targetResources, building.buyPrice);\n          build.isBuyable = buyStatus;\n\n          if (buyStatus) {\n            build.isUnlocked = true;\n          }\n        }\n\n        return build;\n      });\n      return {\n        buildings: newBuildings\n      };\n    });\n  }\n\n  buyStatus(resourceArray, costArray) {\n    let buyStatus = false;\n    let buyLength = costArray.length;\n    resourceArray.forEach(resource => {\n      const targetCost = costArray.find(x => x.name === resource.name);\n\n      if (targetCost.cost <= resource.amount) {\n        buyLength = buyLength - 1;\n      }\n    });\n\n    if (buyLength === 0) {\n      buyStatus = true;\n    }\n\n    return buyStatus;\n  }\n\n  render() {\n    const buildings = this.state.buildings.map(buildingData => {\n      return /*#__PURE__*/React.createElement(Building, {\n        name: buildingData.name,\n        handleBuildingBuy: this.handleBuildingBuy,\n        buyPrice: buildingData.buyPrice,\n        count: buildingData.count,\n        subjectsOfIncrease: buildingData.subjectsOfIncrease,\n        isBuyable: buildingData.isBuyable,\n        sellPrice: buildingData.sellPrice,\n        isUnlocked: buildingData.isUnlocked,\n        key: buildingData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }\n      });\n    });\n    const resources = this.state.resources.map(resourceData => {\n      return /*#__PURE__*/React.createElement(Resource, {\n        name: resourceData.name,\n        max: resourceData.max,\n        isUnlocked: resourceData.isUnlocked,\n        changePerTick: resourceData.changePerTick,\n        counterTillStopped: resourceData.counterTillStopped.toFixed(4),\n        amount: resourceData.amount,\n        key: resourceData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }\n      });\n    });\n    const clickers = this.state.clickers.map(clickerData => {\n      return /*#__PURE__*/React.createElement(Clicker, {\n        name: clickerData.name,\n        handleClicker: this.handleClicker,\n        value: clickerData.amount,\n        key: clickerData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    }, buildings, resources, clickers);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/xampp/htdocs/clicker game/clicker-game/src/App.js"],"names":["React","gameData","Building","Resource","Clicker","App","Component","constructor","state","buildings","buildingData","resources","resourceData","clickers","clickerData","handleClicker","bind","buy","checkBuyingStatus","buyState","buyStatus","handleBuildingBuy","gameTime","gameTick","setInterval","forEach","resource","tickResource","building","targetResource","setState","prevState","newResources","map","lastResource","name","amount","Number","Math","min","max","changePerTick","toFixed","counterTillStopped","componentDidMount","prevProps","event","console","log","target","targetBuilding","find","isBuyable","increaseObjectArray","subjectsOfIncrease","costObjectArray","buyPrice","newClickers","clicker","increase","x","minusCostResources","resouces","targetCost","cost","newBuildings","build","count","increaseRatio","value","targetClicker","targetIncrease","targetResources","filter","targetBuyPriceObject","isUnlocked","resourceArray","costArray","buyLength","length","render","sellPrice"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\"\nimport Building from \"./Building\"\nimport Resource from \"./Resource\"\nimport Clicker from \"./Clicker\"\nclass App extends React.Component \n  {\n  constructor()\n    {\n    super();\n    this.state = {\n      buildings:gameData.buildingData,\n      resources:gameData.resourceData,\n      clickers:gameData.clickerData\n\n    };\n   this.handleClicker = this.handleClicker.bind(this);\n   this.buy = this.buy.bind(this);\n   this.checkBuyingStatus = this.checkBuyingStatus.bind(this);\n   this.buyState = this.buyStatus.bind(this);\n   this.handleBuildingBuy = this.handleBuildingBuy.bind(this);\n  }\n  gameTime()\n    {\n    const gameTick = setInterval(()=>\n        {\n        this.state.resources.forEach(resource=>this.tickResource(resource));\n        this.state.buildings.forEach(building=>this.checkBuyingStatus(building));\n      },100);\n  }\n\n  tickResource(resource)\n    {\n    const targetResource = resource;  \n    this.setState((prevState) =>\n      {  \n      const newResources = prevState.resources.map(lastResource=>\n        {\n        if(lastResource.name === targetResource.name)\n          {\n          resource.amount = Number(Math.min(resource.max,resource.amount + resource.changePerTick).toFixed(4));\n          resource.counterTillStopped = Math.max(0, resource.counterTillStopped - resource.changePerTick);\n        }\n        return lastResource;\n      }); \n\n      return {resources: newResources}\n    });\n  }\n\n  componentDidMount(prevProps, prevState)\n    {\n    this.gameTime(); \n  }\n  handleBuildingBuy(event)  \n    {\n    console.log(event.target);\n    const name = event.target.name;\n    const targetBuilding = this.state.buildings.find(building=>building.name === name)\n    if(targetBuilding.isBuyable) \n      {\n      this.buy(targetBuilding);\n    }\n  }\n  buy(building) \n    { \n    const increaseObjectArray = building.subjectsOfIncrease; \n    const costObjectArray = building.buyPrice \n    const name = building.name;\n    this.setState(prevState=>\n      {\n      const newClickers = prevState.clickers.map(clicker=>{\n        const increase = increaseObjectArray.find(x=>x.name===clicker.name);\n        if(clicker.building&& increase)\n          { \n          clicker.amount = clicker.amount + increase.amount;\n        }\n        return clicker;\n      });\n      const minusCostResources= prevState.resouces.map(resource=>\n        {\n        const targetCost = increaseObjectArray.find(x=>x.name === resource.name);\n        if(targetCost)\n          {\n          resource.amount = Number((resource.amount - targetCost.cost).toFixed(4));\n          resource.max = Number(resource.max + building.subjectsOfIncrease.find(x=>x.name===resource.name).max)\n        }\n        return resource;\n      });\n      const newBuildings = prevState.buildings.map(build=>\n        {\n        if(building.name === build.name)\n          {\n          build.count = build.count + 1;\n          build.buyPrice.forEach(cost=>\n            {\n            cost.cost = Number(cost * Number(\"1\"+build.increaseRatio).toFixed(4));\n          })\n\n        }\n         return build;\n      });\n\n      return{\n        resources:newResources,\n        buildings:newBuildings,\n        clickers:newClickers\n      }\n    });\n\n  }  \n  handleClicker(event)\n    {\n    const {name, value} = event.target;  \n\n    this.setState(prevState=>\n      {\n      const targetClicker = prevState.clickers.find(x=>x.name ===name);\n      const newResources = prevState.resources.map(resource=>\n          {\n           const targetIncrease =  targetClicker.subjectsOfIncrease.find(x=>x.name===resource.name)\n          if(targetIncrease)\n            {\n            resource.amount = Number(Math.min(resource.max,resource.amount + targetIncrease.amount).toFixed(4));\n          }\n          return resource;\n        })\n\n\n      return {resources:newResources}\n    })\n  }\n\n  checkBuyingStatus(building)\n    {\n    this.setState((prevState)=>\n      {  \n      const targetResources = prevState.resources.filter((resource)=>\n        {\n        const targetBuyPriceObject = building.buyPrice.find(x=>x.name===resource.name);  \n        if(targetBuyPriceObject)\n          {\n          return resource;\n        }\n      });\n      \n      const newBuildings = prevState.buildings.map((build)=>\n        {\n        if(build.name === building.name)\n          { \n          const buyStatus =  this.buyStatus(targetResources, building.buyPrice)\n          build.isBuyable = buyStatus;\n\n          if(buyStatus){\n            build.isUnlocked = true;\n          }\n        }\n\n        return build\n      });\n\n    return{buildings:newBuildings};\n    });\n}\n  buyStatus(resourceArray, costArray)\n    {\n    let buyStatus = false;\n    let buyLength = costArray.length;\n    resourceArray.forEach(resource=>  \n      {\n      const targetCost = costArray.find(x=>x.name===resource.name);\n      if(targetCost.cost<=resource.amount) \n        {\n        buyLength = buyLength - 1;\n      }\n    });\n    if(buyLength === 0)\n      {\n      buyStatus = true;\n    }\n\n    return buyStatus;\n  }\n\n \n  \n  render()\n    {\n    const buildings = this.state.buildings.map(buildingData=>\n      {\n      return(\n        <Building \n\n          name ={buildingData.name}\n          handleBuildingBuy={this.handleBuildingBuy}\n          buyPrice={buildingData.buyPrice}\n          count = {buildingData.count}\n          subjectsOfIncrease = {buildingData.subjectsOfIncrease}\n          isBuyable = {buildingData.isBuyable}\n          sellPrice = {buildingData.sellPrice}\n          isUnlocked = {buildingData.isUnlocked}\n          key={buildingData.name}\n          \n        />)\n    });\n    const resources = this.state.resources.map(resourceData=>\n      {\n\n        return(\n\n        <Resource \n          name ={resourceData.name}\n          max = {resourceData.max}\n          isUnlocked = {resourceData.isUnlocked}\n          changePerTick = {resourceData.changePerTick}\n          counterTillStopped = {resourceData.counterTillStopped.toFixed(4)}\n          amount={resourceData.amount}\n          key={resourceData.name}\n\n        />)\n    });   \n\n    const clickers = this.state.clickers.map(clickerData=>\n      {\n      return(\n        <Clicker\n          name={clickerData.name} \n          handleClicker = {this.handleClicker}\n          value = {clickerData.amount}\n          key={clickerData.name}\n        />\n\n      )\n    })\n\n\n\n\n  return (\n\n        <div className=\"App\">\n        {buildings}\n        {resources}\n        {clickers}\n        </div>\n       );\n      }\n    \n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}