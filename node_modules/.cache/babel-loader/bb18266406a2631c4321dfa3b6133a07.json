{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\clicker game\\\\clicker-game\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\";\nimport Building from \"./Building\";\nimport Resource from \"./Resource\";\nimport Clicker from \"./Clicker\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      buildings: gameData.buildingData,\n      resources: gameData.resourceData,\n      clickers: gameData.clickerData\n    };\n    this.handleClicker = this.handleClicker.bind(this);\n    this.buy = this.buy.bind(this);\n    this.checkBuyingStatus = this.checkBuyingStatus.bind(this);\n    this.buyState = this.buyStatus.bind(this);\n    this.handleBuildingBuy = this.handleBuildingBuy.bind(this);\n    this.unlock = this.unlock.bind(this);\n  }\n\n  gameTime() {\n    const gameTick = setInterval(() => {\n      this.state.resources.forEach(resource => this.tickResource(resource));\n      this.state.buildings.forEach(building => this.checkBuyingStatus(building));\n    }, 100);\n  }\n\n  tickResource(resource) {\n    const targetResource = resource;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(lastResource => {\n        if (lastResource.name === targetResource.name) {\n          resource.amount = Number(Math.min(resource.max, resource.amount + resource.changePerTick).toFixed(4));\n          resource.counterTillStopped = Math.max(0, resource.counterTillStopped - resource.changePerTick);\n        }\n\n        return lastResource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  componentDidMount(prevProps, prevState) {\n    this.gameTime();\n  }\n\n  handleBuildingBuy(event) {\n    const name = event.target.name;\n    const targetBuilding = this.state.buildings.find(building => building.name === name);\n\n    if (targetBuilding.isBuyable) {\n      const unlocks = targetBuilding.unlocks;\n\n      if (unlocks.length > 0) {\n        unlocks.forEach(whatToUnlock => {\n          if (whatToUnlock.type == \"resource\") {\n            this.setState(prevState => {\n              const newResources = prevState.resources.map(resource => {\n                if (whatToUnlock.name === resource.name) {\n                  resource.isUnlocked = true;\n                }\n\n                return resource;\n              });\n              return {\n                resources: newResources\n              };\n            });\n          }\n        });\n      }\n\n      this.buy(targetBuilding);\n    }\n  }\n\n  buy(building) {\n    const increaseObjectArray = building.subjectsOfIncrease;\n    const costObjectArray = building.buyPrice;\n    const name = building.name;\n    this.setState(prevState => {\n      const newResources = prevState.resources.map(resource => {\n        const targetCost = increaseObjectArray.find(x => x.name === resource.name);\n\n        if (targetCost) {\n          console.log(targetCost.amount, resource.max);\n          console.log(resource.amount);\n          console.log(building.subjectsOfIncrease.find(x => x.name === resource.name).max);\n          resource.amount = Number((resource.amount - targetCost.amount).toFixed(4));\n          console.log(resource.amount);\n          const buildingCount = building.count + 1;\n          const subject = building.subjectsOfIncrease.find(x => x.name === resource.name);\n          console.log(\"subject\", subject);\n          console.log(buildingCount);\n          const subMax = subject.max;\n          const subAmount = subject.amount;\n          console.log(subAmount);\n          console.log(resource.max);\n          resource.max = Number((resource.max + buildingCount * subMax).toFixed(4));\n          resource.changePerTick = Number((resource.changePerTick + buildingCount * subAmount).toFixed(4));\n        }\n\n        return resource;\n      });\n      const newBuildings = prevState.buildings.map(build => {\n        if (building.name === build.name) {\n          build.count = build.count + 1;\n          build.buyPrice.forEach(cost => {\n            cost.cost = Number((cost.cost * build.increaseRatio).toFixed(4));\n          });\n        }\n\n        return build;\n      });\n      return {\n        resources: newResources,\n        buildings: newBuildings\n      };\n    });\n  }\n\n  unlock(whatToUnlock) {}\n\n  handleClicker(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    console.log(\"clicked:\", name);\n    console.log(this.state);\n    this.setState(prevState => {\n      const targetClicker = prevState.clickers.find(x => x.name === name);\n      const newResources = prevState.resources.map(resource => {\n        const targetIncrease = targetClicker.subjectsOfIncrease.find(x => x.name === resource.name);\n\n        if (targetIncrease) {\n          resource.amount = Number(Math.min(resource.max, resource.amount + targetIncrease.amount).toFixed(4));\n        }\n\n        return resource;\n      });\n      return {\n        resources: newResources\n      };\n    });\n  }\n\n  checkBuyingStatus(building) {\n    this.setState(prevState => {\n      const targetResources = prevState.resources.filter(resource => {\n        const targetBuyPriceObject = building.buyPrice.find(x => x.name === resource.name);\n\n        if (targetBuyPriceObject) {\n          return resource;\n        }\n      });\n      const newBuildings = prevState.buildings.map(build => {\n        if (build.name === building.name) {\n          const buyStatus = this.buyStatus(targetResources, building.buyPrice);\n          build.isBuyable = buyStatus;\n\n          if (buyStatus) {\n            build.isUnlocked = true;\n          }\n        }\n\n        return build;\n      });\n      return {\n        buildings: newBuildings\n      };\n    });\n  }\n\n  buyStatus(resourceArray, costArray) {\n    let buyStatus = false;\n    let buyLength = costArray.length;\n    resourceArray.forEach(resource => {\n      const targetCost = costArray.find(x => x.name === resource.name);\n\n      if (targetCost.cost <= resource.amount) {\n        buyLength = buyLength - 1;\n      }\n    });\n\n    if (buyLength === 0) {\n      buyStatus = true;\n    }\n\n    return buyStatus;\n  }\n\n  render() {\n    const buildings = this.state.buildings.map(buildingData => {\n      return /*#__PURE__*/React.createElement(Building, {\n        name: buildingData.name,\n        handleBuildingBuy: this.handleBuildingBuy,\n        buyPrice: buildingData.buyPrice,\n        count: buildingData.count,\n        subjectsOfIncrease: buildingData.subjectsOfIncrease,\n        isBuyable: buildingData.isBuyable,\n        isUnlocked: buildingData.isUnlocked,\n        key: buildingData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 9\n        }\n      });\n    });\n    const resources = this.state.resources.map(resourceData => {\n      return /*#__PURE__*/React.createElement(Resource, {\n        name: resourceData.name,\n        max: resourceData.max,\n        isUnlocked: resourceData.isUnlocked,\n        changePerTick: resourceData.changePerTick,\n        amount: resourceData.amount,\n        key: resourceData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 9\n        }\n      });\n    });\n    const clickers = this.state.clickers.map(clickerData => {\n      return /*#__PURE__*/React.createElement(Clicker, {\n        name: clickerData.name,\n        handleClicker: this.handleClicker,\n        value: clickerData.amount,\n        key: clickerData.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buildingContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }\n    }, buildings), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"resourceContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }\n    }, resources), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clickerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }\n    }, clickers));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/xampp/htdocs/clicker game/clicker-game/src/App.js"],"names":["React","gameData","Building","Resource","Clicker","App","Component","constructor","state","buildings","buildingData","resources","resourceData","clickers","clickerData","handleClicker","bind","buy","checkBuyingStatus","buyState","buyStatus","handleBuildingBuy","unlock","gameTime","gameTick","setInterval","forEach","resource","tickResource","building","targetResource","setState","prevState","newResources","map","lastResource","name","amount","Number","Math","min","max","changePerTick","toFixed","counterTillStopped","componentDidMount","prevProps","event","target","targetBuilding","find","isBuyable","unlocks","length","whatToUnlock","type","isUnlocked","increaseObjectArray","subjectsOfIncrease","costObjectArray","buyPrice","targetCost","x","console","log","buildingCount","count","subject","subMax","subAmount","newBuildings","build","cost","increaseRatio","value","targetClicker","targetIncrease","targetResources","filter","targetBuyPriceObject","resourceArray","costArray","buyLength","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport gameData from \"./gameData.js\"\nimport Building from \"./Building\"\nimport Resource from \"./Resource\"\nimport Clicker from \"./Clicker\"\nclass App extends React.Component \n  {\n  constructor()\n    {\n    super();\n    this.state = {\n      buildings:gameData.buildingData,\n      resources:gameData.resourceData,\n      clickers:gameData.clickerData\n\n    };\n   this.handleClicker = this.handleClicker.bind(this);\n   this.buy = this.buy.bind(this);\n   this.checkBuyingStatus = this.checkBuyingStatus.bind(this);\n   this.buyState = this.buyStatus.bind(this);\n   this.handleBuildingBuy = this.handleBuildingBuy.bind(this);\n   this.unlock = this.unlock.bind(this);\n  }\n  gameTime()\n    {\n    const gameTick = setInterval(()=>\n        {\n        this.state.resources.forEach(resource=>this.tickResource(resource));\n        this.state.buildings.forEach(building=>this.checkBuyingStatus(building));\n      },100);\n  }\n\n  tickResource(resource)\n    {\n    const targetResource = resource;  \n    this.setState((prevState) =>\n      {  \n      const newResources = prevState.resources.map(lastResource=>\n        {\n        if(lastResource.name === targetResource.name)\n          {\n          resource.amount = Number(Math.min(resource.max,resource.amount + resource.changePerTick).toFixed(4));\n          resource.counterTillStopped = Math.max(0, resource.counterTillStopped - resource.changePerTick);\n        }\n        return lastResource;\n      }); \n\n      return {resources: newResources}\n    });\n  }\n\n  componentDidMount(prevProps, prevState)\n    {\n    this.gameTime(); \n  }\n  handleBuildingBuy(event)  \n    {\n    const name = event.target.name;\n    const targetBuilding = this.state.buildings.find(building=>building.name === name)\n    if(targetBuilding.isBuyable) \n      {\n      const unlocks = targetBuilding.unlocks;\n      if(unlocks.length>0)\n        {\n        unlocks.forEach(whatToUnlock=>\n          {\n          if(whatToUnlock.type == \"resource\")\n            {\n            this.setState((prevState)=>\n              {\n              const newResources = prevState.resources.map(resource=>\n                {\n                if(whatToUnlock.name === resource.name)\n                  {\n                  resource.isUnlocked = true;\n                }\n                return resource;\n              });\n              return {resources:newResources}\n            });\n          }\n\n\n        });\n      }\n      this.buy(targetBuilding);\n    }\n  }\n  buy(building) \n    { \n    const increaseObjectArray = building.subjectsOfIncrease; \n    const costObjectArray = building.buyPrice \n    const name = building.name;\n    this.setState(prevState=>\n      {\n     \n      const newResources= prevState.resources.map(resource=>\n        {\n        const targetCost = increaseObjectArray.find(x=>x.name === resource.name);\n        if(targetCost)\n          {\n           console.log(targetCost.amount, resource.max)\n           console.log(resource.amount);\n           console.log(building.subjectsOfIncrease.find(x=>x.name===resource.name).max) \n          resource.amount = Number((resource.amount - targetCost.amount).toFixed(4));\n          console.log(resource.amount);\n\n          const buildingCount = (building.count + 1);\n          const subject = building.subjectsOfIncrease.find(x=>x.name===resource.name);\n          console.log(\"subject\", subject);\n          console.log(buildingCount);\n          const subMax = subject.max;\n          const subAmount = subject.amount;\n          console.log(subAmount);\n          console.log(resource.max);\n          resource.max = Number((resource.max + buildingCount * subMax).toFixed(4));\n          resource.changePerTick = Number((resource.changePerTick + buildingCount*subAmount).toFixed(4));\n        }\n        return resource;\n      });\n      const newBuildings = prevState.buildings.map(build=>\n        {\n        if(building.name === build.name)\n          {\n          build.count = build.count + 1;\n          build.buyPrice.forEach(cost=>\n            {\n            cost.cost = Number((cost.cost * build.increaseRatio).toFixed(4));\n          })\n\n        }\n         return build;\n      });\n\n      return{\n        resources:newResources,\n        buildings:newBuildings,\n      }\n    });\n\n  } \n  unlock(whatToUnlock)\n    {\n    \n  } \n  handleClicker(event)\n    {\n    const {name, value} = event.target;  \n    console.log(\"clicked:\", name);\n    console.log(this.state); \n    this.setState(prevState=>\n      {\n      const targetClicker = prevState.clickers.find(x=>x.name ===name);\n      const newResources = prevState.resources.map(resource=>\n          {\n           const targetIncrease =  targetClicker.subjectsOfIncrease.find(x=>x.name===resource.name)\n          if(targetIncrease)\n            {\n            resource.amount = Number(Math.min(resource.max,resource.amount + targetIncrease.amount).toFixed(4));\n          }\n          return resource;\n        })\n\n\n      return {resources:newResources}\n    })\n  }\n\n  checkBuyingStatus(building)\n    {\n    this.setState((prevState)=>\n      {  \n      const targetResources = prevState.resources.filter((resource)=>\n        {\n        const targetBuyPriceObject = building.buyPrice.find(x=>x.name===resource.name);  \n        if(targetBuyPriceObject)\n          {\n          return resource;\n        }\n      });\n      \n      const newBuildings = prevState.buildings.map((build)=>\n        {\n        if(build.name === building.name)\n          { \n          const buyStatus =  this.buyStatus(targetResources, building.buyPrice)\n          build.isBuyable = buyStatus;\n\n          if(buyStatus){\n            build.isUnlocked = true;\n          }\n        }\n\n        return build\n      });\n\n    return{buildings:newBuildings};\n    });\n}\n  buyStatus(resourceArray, costArray)\n    {\n    let buyStatus = false;\n    let buyLength = costArray.length;\n    resourceArray.forEach(resource=>  \n      {\n      const targetCost = costArray.find(x=>x.name===resource.name);\n      if(targetCost.cost<=resource.amount) \n        {\n        buyLength = buyLength - 1;\n      }\n    });\n    if(buyLength === 0)\n      {\n      buyStatus = true;\n    }\n\n    return buyStatus;\n  }\n\n \n  \n  render()\n    {\n    const buildings = this.state.buildings.map(buildingData=>\n      {\n      return(\n        <Building \n\n          name ={buildingData.name}\n          handleBuildingBuy={this.handleBuildingBuy}\n          buyPrice={buildingData.buyPrice}\n          count = {buildingData.count}\n          subjectsOfIncrease = {buildingData.subjectsOfIncrease}\n          isBuyable = {buildingData.isBuyable}\n          isUnlocked = {buildingData.isUnlocked}\n          key={buildingData.name}\n          \n        />)\n    });\n    const resources = this.state.resources.map(resourceData=>\n      {\n\n        return(\n\n        <Resource \n          name ={resourceData.name}\n          max = {resourceData.max}\n          isUnlocked = {resourceData.isUnlocked}\n          changePerTick = {resourceData.changePerTick}\n          amount={resourceData.amount}\n          key={resourceData.name}\n\n        />)\n    });   \n\n    const clickers = this.state.clickers.map(clickerData=>\n      {\n      return(\n        <Clicker\n          name={clickerData.name} \n          handleClicker = {this.handleClicker}\n          value = {clickerData.amount}\n          key={clickerData.name}\n        />\n\n      )\n    })\n\n\n\n\n  return (\n\n        <div className=\"App\">\n        <div className=\"buildingContainer\">{buildings}</div>\n        <div className=\"resourceContainer\">{resources}</div>\n        <div className=\"clickerContainer\">{clickers}</div>\n        </div>\n       );\n      }\n    \n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}